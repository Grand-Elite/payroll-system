/*
import React, { useState, useEffect } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  TextField,
  Select,
  MenuItem,
  Typography,
  Button,
} from '@mui/material';
import dayjs from 'dayjs';
import { fetchAttendance, updateAttendanceStatus } from '../../services/api'; // Ensure your api service has the updateAttendanceStatus method
import OTHoursCell from './OTHoursCell';
import LateHoursCell from './LateHoursCell';

function AttendanceTable(props) {
  const [daysInMonth, setDaysInMonth] = useState([]);

  useEffect(() => {
    const currentMonth = dayjs(`01 ${props.selectedMonth} 2000`, "DD MMMM YYYY").month(); 
    const currentYear = props.selectedYear;
    const days = [];
    const daysInCurrentMonth = dayjs().daysInMonth();

    for (let i = 1; i <= daysInCurrentMonth; i++) {
      const date = dayjs(new Date(currentYear, currentMonth, i));
      const dayOfWeek = date.day();
      days.push({
        date: date.format('YYYY-MM-DD'),
        day: date.format('dddd'),
        dayOfWeek,
        timeIn: '',
        timeOut: '',
        attendanceStatus: 'ab',
        originalAttendanceStatus: 'ab', // Store the original status
        workHours: '',
        shift: '',
        otHours: 0,
        originalOtHours: 0,
        lateHours: 0,
        originalLateHours: 0,
        leaveType: '',
      });
    }

    setDaysInMonth(days);

    const loadEmployeeAttendance = async () => {
      try {
        const employeeAttendanceList = await fetchAttendance(props.employeeId);
        
        const attendanceMap = {};
        employeeAttendanceList.forEach(record => {
            attendanceMap[record.date] = record;
        });
        console.log(attendanceMap)
        const updatedDays = days.map(day => {
            const attendanceRecord = attendanceMap[day.date];
            if (attendanceRecord) {
                return {
                    ...day,
                    attendanceRecordId:attendanceRecord.attendanceRecordId,
                    timeIn: attendanceRecord.actualStartTime || '',
                    timeOut: attendanceRecord.actualEndTime || '',
                    attendanceStatus: attendanceRecord.attendance || '',
                    originalAttendanceStatus: attendanceRecord.attendance || '', 
                    workHours: attendanceRecord.workHours || '',
                    shift: attendanceRecord.shift || 'M',
                    otHours: attendanceRecord.otHours || '',
                    originalOtHours: attendanceRecord.otHours || '', 
                    lateHours: attendanceRecord.lateHours || '',
                    originalLateHours: attendanceRecord.lateHours || '', 
                    leaveType: attendanceRecord.leaveType || '',
                };
            }
            return day;
        });
        setDaysInMonth(updatedDays);
      } catch (error) {
        console.error("Error fetching employee attendance:", error);
      }
    };

    loadEmployeeAttendance();
  }, [props.employeeId, props.selectedMonth, props.selectedYear]);

  const handleFieldChange = (index, field, value) => {
    const updatedDays = [...daysInMonth];
    updatedDays[index][field] = value;

    // If the attendance status is changed, set the new status
    if (field === 'attendanceStatus') {
        updatedDays[index].attendanceStatus = value;
    }

    setDaysInMonth(updatedDays);
};

/* WORKING HANDLE SAVE FUNCTION
  const handleSave = async (index) => {
    const day = daysInMonth[index];
    if (day.attendanceStatus !== day.originalAttendanceStatus) {
        try {
            await updateAttendanceStatus(props.employeeId,day.date, day.attendanceStatus);
            // Update the original status after saving
            const updatedDays = [...daysInMonth];
            updatedDays[index].originalAttendanceStatus = day.attendanceStatus;
            setDaysInMonth(updatedDays);
            alert('Attendance status updated successfully');
        } catch (error) {
            console.error('Error updating attendance status:', error);
            alert('Failed to update attendance status');
        }
    }
};
*/

/*
const handleSave = async (index) => {
  const day = daysInMonth[index];
  if (day.attendanceStatus !== day.originalAttendanceStatus) {
      try {
          await updateAttendanceStatus(day.attendanceRecordId, day.attendanceStatus);
          // Update the original status after saving
          const updatedDays = [...daysInMonth];
          updatedDays[index].originalAttendanceStatus = day.attendanceStatus;
          setDaysInMonth(updatedDays);
          alert('Attendance status updated successfully');
      } catch (error) {
          console.error('Error updating attendance status:', error);
          alert('Failed to update attendance status');
      }
  }
};



  return (
    <TableContainer component={Paper} style={{ margin: 'auto' }}>
      <Table>
        <TableHead>
          <TableRow>
            <TableCell>Date</TableCell>
            <TableCell>Time In</TableCell>
            <TableCell>Time Out</TableCell>
            <TableCell>Work Hours</TableCell>
            <TableCell>Shift</TableCell>
            <TableCell>OT Hours</TableCell>
            <TableCell>Late Hours</TableCell>
            <TableCell>Attendance Status</TableCell>
            {/* <TableCell>Leave Type</TableCell> 
          </TableRow>
        </TableHead>
        <TableBody>
          {daysInMonth.map((day, index) => (
            <TableRow
              key={index}
              style={{
                backgroundColor:
                  day.dayOfWeek === 0 || day.dayOfWeek === 6 ? '#f5f5f5' : 'inherit',
              }}
            >
              <TableCell>
                <Typography>{day.date} ({day.day})</Typography>
              </TableCell>
              <TableCell>
                <TextField
                  type="time"
                  value={dayjs(day.timeIn).format("HH:mm:ss")}
                  onChange={(e) => handleFieldChange(index, 'timeIn', e.target.value)}
                  size="small"
                />
              </TableCell>
              <TableCell>
                <TextField
                  type="time"
                  value={dayjs(day.timeOut).format("HH:mm:ss")}
                  onChange={(e) => handleFieldChange(index, 'timeOut', e.target.value)}
                  size="small"
                />
              </TableCell>
              <TableCell>
                <TextField
                  value={day.workHours}
                  size="small"
                />
              </TableCell>
              <TableCell>
                  <Select
                      value={day.shift}
                      onChange={(e) => handleFieldChange(index, "shift", e.target.value)}
                      size="small"
                      displayEmpty
                  >
                      <MenuItem value="M">M</MenuItem>
                      <MenuItem value="E">E</MenuItem>
                  </Select>
                </TableCell>
              <OTHoursCell 
              day={day} 
              index={index} 
              handleFieldChange={handleFieldChange} />

              <LateHoursCell 
              day={day} 
              index={index} 
              handleFieldChange={handleFieldChange} />


              <TableCell>
                  <Select
                      value={day.attendanceStatus}
                      onChange={(e) => handleFieldChange(index, "attendanceStatus", e.target.value)}
                      size="small"
                      displayEmpty
                  >
                      <MenuItem value="ab">ab</MenuItem>
                      <MenuItem value="ab-nopay">ab-nopay</MenuItem>
                      <MenuItem value="0.5">0.5</MenuItem>
                      <MenuItem value="1">1</MenuItem>
                  </Select>
                </TableCell>
              {/* <TableCell>
                <Select
                  value={day.leaveType}
                  onChange={(e) => handleFieldChange(index, 'leaveType', e.target.value)}
                  displayEmpty
                  size="small"
                >
                  <MenuItem value="">
                    <em>None</em>
                  </MenuItem>
                  <MenuItem value="full day leave">Full Day Leave</MenuItem>
                  <MenuItem value="half day leave">Half Day Leave</MenuItem>
                  <MenuItem value="no pay leave">No Pay Leave</MenuItem>
                  <MenuItem value="holiday">Holiday</MenuItem>
                </Select>
              </TableCell> 
              <TableCell>
                  {/* Only show the save button if the status has changed 
                  {(day.attendanceStatus !== day.originalAttendanceStatus 
                  || day.otHours !== day.originalOtHours 
                  || day.lateHours !== day.originalLateHours )
                  && (
                      <Button
                          variant="contained"
                          color="primary"
                          size="small"
                          onClick={() => handleSave(index)}
                      >
                          Save
                      </Button>
                  )}
                </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
}

export default AttendanceTable;

*/
/*

import React, { useEffect, useState } from 'react';
import './Shift.css';
import { patch } from '@mui/material';

const Shift = () => {
  const [shifts, setShifts] = useState([]);  // Initialize as an empty array
  const [loading, setLoading] = useState(true);  // To handle loading state
  const [error, setError] = useState(null);  // To handle any errors
  const [modifiedShifts, setModifiedShifts] = useState({});  // Track modified shifts

  // Fetch shift data from the backend API
  useEffect(() => {
    const fetchShiftData = async () => {
      try {
        const response = await fetch('/api/shifts');
        if (!response.ok) {
          throw new Error('Failed to fetch shifts');
        }
        const data = await response.json();

        // Ensure `data` is an array before setting it to `shifts`
        setShifts(Array.isArray(data) ? data : []);
      } catch (error) {
        console.error('Error fetching shift data:', error);
        setError(error.message);  // Set the error message
      } finally {
        setLoading(false);  // Set loading to false once data is fetched
      }
    };

    fetchShiftData();
  }, []);

  const handleTimeChange = (index, field, value) => {
    const updatedShifts = [...shifts];
    updatedShifts[index][field] = value;
    setShifts(updatedShifts);

    // Mark the shift as modified
    setModifiedShifts((prevModified) => ({
      ...prevModified,
      [index]: true,
    }));
  };

  const handleSave = (index) => {
    const shiftToSave = shifts[index];

    console.log('Saving shift:', shiftToSave);

    // After saving, reset the modified flag for the shift
    setModifiedShifts((prevModified) => ({
      ...prevModified,
      [index]: false,
    }));

    // Here you could optionally update the UI after the save. In this case, we already updated the state
    // when the time was changed, so the table will reflect the new times.
  };

  return (
    <div>
      <header>
        <h2 style={{ marginBottom: '20px' }}>Shift Details</h2>
      </header>

      {loading && <p>Loading...</p>}  {/* Show loading message if data is being fetched *

      {error && <p style={{ color: 'red' }}>{error}</p>}  {/* Show error message if there is an error *

      {!loading && !error && (
        <table border="1" style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead>
            <tr>
              <th>Shift Type</th>
              <th>Start Time</th>
              <th>End Time</th>
              <th>Actions</th>  {/* Column for the Save button *
            </tr>
          </thead>
          <tbody>
            {shifts.map((shift, index) => (
              <tr key={index}>
                <td>{shift.shiftType}</td> {/* Shift ID will be shown as Shift Type *
                <td>
                  <input
                    type="time"
                    value={shift.startTime}
                    onChange={(e) => handleTimeChange(index, 'startTime', e.target.value)}
                  />
                </td>
                <td>
                  <input
                    type="time"
                    value={shift.endTime}
                    onChange={(e) => handleTimeChange(index, 'endTime', e.target.value)}
                  />
                </td>
                <td>
                  {/* Display Save button only if the shift has been modified 
                  {modifiedShifts[index] && (
                    <button className="save-button" onClick={() => handleSave(index)}>
                      Save
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default Shift;
*/

/*
import React, { useEffect, useState } from 'react';
import './Shift.css';
//import { patch } from '@mui/material';
import { updateShift } from '../../services/api'; // Adjust the path if `api.js` is located elsewhere


const Shift = () => {
  const [shifts, setShifts] = useState([]);  // Initialize as an empty array
  const [loading, setLoading] = useState(true);  // To handle loading state
  const [error, setError] = useState(null);  // To handle any errors
  const [modifiedShifts, setModifiedShifts] = useState({});  // Track modified shifts

  // Fetch shift data from the backend API
  useEffect(() => {
    const fetchShiftData = async () => {
      try {
        const response = await fetch('/api/shifts');
        if (!response.ok) {
          throw new Error('Failed to fetch shifts');
        }
        const data = await response.json();

        // Ensure `data` is an array before setting it to `shifts`
        setShifts(Array.isArray(data) ? data : []);
      } catch (error) {
        console.error('Error fetching shift data:', error);
        setError(error.message);  // Set the error message
      } finally {
        setLoading(false);  // Set loading to false once data is fetched
      }
    };

    fetchShiftData();
  }, []);

  const handleTimeChange = (index, field, value) => {
    const updatedShifts = [...shifts];
    updatedShifts[index][field] = value;
    setShifts(updatedShifts);

    // Mark the shift as modified
    setModifiedShifts((prevModified) => ({
      ...prevModified,
      [index]: true,
    }));
  };

  /*
  const handleSave = (index) => {
    const shiftToSave = shifts[index];

    console.log('Saving shift:', shiftToSave);

    // After saving, reset the modified flag for the shift
    setModifiedShifts((prevModified) => ({
      ...prevModified,
      [index]: false,
    }));

    // Here you could optionally update the UI after the save. In this case, we already updated the state
    // when the time was changed, so the table will reflect the new times.
  };
  */
 /*
  const handleSave = async (index) => {
    const shiftToSave = shifts[index];
  
    console.log('Saving shift:', shiftToSave);  // Log the shift to verify its structure
  
    // Check if the shift has a valid ID
    if (!shiftToSave || !shiftToSave.id) {
      console.error('Shift does not have a valid ID');
      return;  // Prevent the save operation if there's no valid ID
    }
  
    try {
      const response = await fetch(`/api/shifts/${shiftToSave.id}`, {
        method: 'PATCH',  // Use PATCH method to update a specific shift
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(shiftToSave),  // Sending the updated shift details as JSON
      });
  
      if (!response.ok) {
        throw new Error('Failed to save shift');
      }
  
      // After saving, reset the modified flag for the shift
      setModifiedShifts((prevModified) => ({
        ...prevModified,
        [index]: false,
      }));
  
      console.log('Shift saved successfully!');
    } catch (error) {
      console.error('Error saving shift:', error);
      // Optionally, display an error message to the user
    }
  };
  */

/*
  const handleSave = async (index) => {
    const shiftToSave = shifts[index];
  
    const id = shiftToSave.shiftId; // Assign shiftId as id
    const shiftData = {
      shiftType: shiftToSave.shiftType,
      startTime: shiftToSave.startTime,
      endTime: shiftToSave.endTime,
      department: shiftToSave.department,
    };
    // Show confirmation message
    const confirmed = window.confirm("Are you sure you want to save the changes?");
    if (!confirmed) return; // Cancel the save operation if the user clicks "Cancel"

  
    try {
      const response = await updateShift(id, shiftData);
      console.log('Shift saved successfully:', response);
    } catch (error) {
      console.error('Error saving shift:', error);
    }
  };
  
  
  return (
    <div>
      <header>
        <h2 style={{ marginBottom: '20px' }}>Shift Details</h2>
      </header>

      {loading && <p>Loading...</p>}  {/* Show loading message if data is being fetched 

      {error && <p style={{ color: 'red' }}>{error}</p>}  {/* Show error message if there is an error 

      {!loading && !error && (
        <table border="1" style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead>
            <tr>
              <th>Department</th>  
              <th>Shift Type</th>
              <th>Start Time</th>
              <th>End Time</th>
              <th></th>  {/* Column for the Save button 
            </tr>
          </thead>
          <tbody>
            {shifts.map((shift, index) => (
              <tr key={index}>
                <td></td>
                <td>{shift.shiftType}</td> {/* Shift ID will be shown as Shift Type 
                <td>
                  <input
                    type="time"
                    value={shift.startTime}
                    onChange={(e) => handleTimeChange(index, 'startTime', e.target.value)}
                  />
                </td>
                <td>
                  <input
                    type="time"
                    value={shift.endTime}
                    onChange={(e) => handleTimeChange(index, 'endTime', e.target.value)}
                  />
                </td>
                <td>
                  {/* Display Save button only if the shift has been modified 
                  {modifiedShifts[index] && (
                    <button className="save-button" onClick={() => handleSave(index)}>
                      Save
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default Shift;
*/

/*
import React, { useEffect, useState } from 'react';
import './Shift.css';
import { updateShift } from '../../services/api'; // Adjust the path if `api.js` is located elsewhere

const Shift = () => {
  const [shifts, setShifts] = useState([]);  // Initialize as an empty array
  const [loading, setLoading] = useState(true);  // To handle loading state
  const [error, setError] = useState(null);  // To handle any errors
  const [modifiedShifts, setModifiedShifts] = useState({});  // Track modified shifts

  // Fetch shift data from the backend API
  useEffect(() => {
    const fetchShiftData = async () => {
      try {
        const response = await fetch('/api/shifts');
        if (!response.ok) {
          throw new Error('Failed to fetch shifts');
        }
        const data = await response.json();

        // Ensure `data` is an array before setting it to `shifts`
        setShifts(Array.isArray(data) ? data : []);
      } catch (error) {
        console.error('Error fetching shift data:', error);
        setError(error.message);  // Set the error message
      } finally {
        setLoading(false);  // Set loading to false once data is fetched
      }
    };

    fetchShiftData();
  }, []);

  const handleTimeChange = (index, field, value) => {
    const updatedShifts = [...shifts];
    updatedShifts[index][field] = value;
    setShifts(updatedShifts);

    // Mark the shift as modified
    setModifiedShifts((prevModified) => ({
      ...prevModified,
      [index]: true,
    }));
  };

  const handleSave = async (index) => {
    const shiftToSave = shifts[index];
  
    const id = shiftToSave.shiftId; // Assign shiftId as id
    const shiftData = {
      shiftType: shiftToSave.shiftType,
      startTime: shiftToSave.startTime,
      endTime: shiftToSave.endTime,
      department: shiftToSave.department,
    };
    // Show confirmation message
    const confirmed = window.confirm("Are you sure you want to save the changes?");
    if (!confirmed) return; // Cancel the save operation if the user clicks "Cancel"

    try {
      const response = await updateShift(id, shiftData);
      console.log('Shift saved successfully:', response);
    } catch (error) {
      console.error('Error saving shift:', error);
    }
  };

  return (
    <div>
      <header>
        <h2 style={{ marginBottom: '20px' }}>Shift Details</h2>
      </header>

    
      {error && <p style={{ color: 'red' }}>{error}</p>}  

      {!loading && !error && (
        <table border="1" style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead>
            <tr>
              <th>Department</th>  
              <th>Shift Type</th>
              <th>Start Time</th>
              <th>End Time</th>
              <th></th>  
            </tr>
          </thead>
          <tbody>
            {shifts.map((shift, index) => (
              <tr key={index}>
                <td>{shift.department ? shift.department.name : 'N/A'}</td> 
                <td>{shift.shiftType}</td>
                <td>
                  <input
                    type="time"
                    value={shift.startTime}
                    onChange={(e) => handleTimeChange(index, 'startTime', e.target.value)}
                  />
                </td>
                <td>
                  <input
                    type="time"
                    value={shift.endTime}
                    onChange={(e) => handleTimeChange(index, 'endTime', e.target.value)}
                  />
                </td>
                <td>
                  
                  {modifiedShifts[index] && (
                    <button className="save-button" onClick={() => handleSave(index)}>
                      Save
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default Shift;
*/



/*
import React, { useEffect, useState } from 'react';
import './Shift.css';
import { updateShift } from '../../services/api'; // Adjust the path if `api.js` is located elsewhere

const Shift = () => {
  const [shifts, setShifts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [modifiedShifts, setModifiedShifts] = useState({});

  // Fetch shift data from the backend API
  useEffect(() => {
    const fetchShiftData = async () => {
      try {
        const response = await fetch('/api/shifts');
        if (!response.ok) {
          throw new Error('Failed to fetch shifts');
        }
        const data = await response.json();

        // Ensure `data` is an array before setting it to `shifts`
        setShifts(Array.isArray(data) ? data : []);
      } catch (error) {
        console.error('Error fetching shift data:', error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchShiftData();
  }, []);

  const handleTimeChange = (index, field, value) => {
    const updatedShifts = [...shifts];
    updatedShifts[index][field] = value;
    setShifts(updatedShifts);

    // Mark the shift as modified
    setModifiedShifts((prevModified) => ({
      ...prevModified,
      [index]: true,
    }));
  };

  // Function to calculate duration between startTime and endTime
  const calculateDuration = (startTime, endTime) => {
    const start = new Date(`1970-01-01T${startTime}:00`);
    const end = new Date(`1970-01-01T${endTime}:00`);

    // Handle case where end time is after midnight (e.g., 10:00 to 02:00)
    if (end < start) {
      end.setDate(end.getDate() + 1);
    }

    const diff = (end - start) / (1000 * 60); // Difference in minutes
    const hours = Math.floor(diff / 60);
    const minutes = diff % 60;
    return `${hours}:${minutes}`;
  };

  const handleSave = async (index) => {
    const shiftToSave = shifts[index];
    const id = shiftToSave.shiftId;
    const shiftData = {
      shiftType: shiftToSave.shiftType,
      startTime: shiftToSave.startTime,
      endTime: shiftToSave.endTime,
      department: shiftToSave.department,
    };

    const confirmed = window.confirm("Are you sure you want to save the changes?");
    if (!confirmed) return;

    try {
      const response = await updateShift(id, shiftData);
      console.log('Shift saved successfully:', response);
    } catch (error) {
      console.error('Error saving shift:', error);
    }
  };

  return (
    <div>
      <header>
        <h2 style={{ marginBottom: '20px' }}>Shift Details</h2>
      </header>

      {loading && <p>Loading...</p>}
      {error && <p style={{ color: 'red' }}>{error}</p>}

      {!loading && !error && (
        <table border="1" style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead>
            <tr>
              <th>Department</th>
              <th>Shift Type</th>
              <th>Start Time</th>
              <th>End Time</th>
              <th>Shift Duration</th> 
              <th></th> 
            </tr>
          </thead>
          <tbody>
            {shifts.map((shift, index) => (
              <tr key={index}>
                <td>{shift.department ? shift.department.name : 'N/A'}</td>
                <td>{shift.shiftType}</td>
                <td>
                  <input
                    type="time"
                    value={shift.startTime}
                    onChange={(e) => handleTimeChange(index, 'startTime', e.target.value)}
                  />
                </td>
                <td>
                  <input
                    type="time"
                    value={shift.endTime}
                    onChange={(e) => handleTimeChange(index, 'endTime', e.target.value)}
                  />
                </td>
                <td>{calculateDuration(shift.startTime, shift.endTime)}</td> 
                <td>
                  
                  {modifiedShifts[index] && (
                    <button className="save-button" onClick={() => handleSave(index)}>
                      Save
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default Shift;

*/

/*
import { Link } from 'react-router-dom';
import AttendanceTable from './AttendanceTable';
import React, { useState, useEffect } from 'react';
import {
  Box,
  Select,
  MenuItem,
  Typography,
  FormControl,
  InputLabel,
} from '@mui/material';
import { fetchEmployees } from '../../services/api';



function Attendance({ selectedMonth, selectedYear }) {
    const [employees, setEmployees] = useState([]);
    const [selectedEmployee, setSelectedEmployee] = useState(null);
  
    // Fetch employees when component mounts
    useEffect(() => {
      const loadEmployees = async () => {
        try {
          const employeeList = await fetchEmployees();
          setEmployees(employeeList);
        } catch (error) {
          console.error("Error fetching employees:", error);
        }
      };
      loadEmployees();
    }, []);
  
    // Handle employee selection
    const handleEmployeeChange = (event) => {
      const employeeId = event.target.value;
      const employee = employees.find((emp) => emp.employeeId === employeeId);
      setSelectedEmployee(employee);
    };
  
    return (
      <Box display="flex" flexDirection="column" alignItems="center" p={3}>
        <div className="buttons">
            <Link to="/upload-attendance-excel">
                <button>Upload Employee Attendance</button>
            </Link>
        </div>
        <FormControl fullWidth variant="outlined" margin="normal">
          <InputLabel>Select Employee</InputLabel>
          <Select
            label="Select Employee"
            value={selectedEmployee ? selectedEmployee.employeeId : ""}
            onChange={handleEmployeeChange}
          >
            {employees.map((employee) => (
              <MenuItem key={employee.employeeId} value={employee.employeeId}>
                {employee.shortName}
              </MenuItem>
            ))}
          </Select>
        </FormControl>
  
        {/* Show the Attendance Table only if an employee is selected 
        {selectedEmployee && (
          <>
            <Typography variant="h6" align="center" gutterBottom fontWeight={"bold"}>
              {`Attendance for ${selectedMonth} ${selectedYear}`}
            </Typography>
            <br/>
            <Typography 
                    variant="h8" 
                    align="left" 
                    gutterBottom 
                    style={{ width: '100%', display: 'flex', justifyContent: 'space-between' }}
                  >
                    <span>{`Employee Name: ${selectedEmployee.shortName}`}</span>
                    <span>{`Designated Time In: `}</span>
                    <span>{`Designated Time Out:`}</span>
                    <span>{`Designated Working hours:`}</span>
            </Typography>
           <br/>

            <AttendanceTable employeeId={selectedEmployee.employeeId} selectedMonth={selectedMonth} selectedYear={selectedYear} />
          </>
        )}
      </Box>
    );
};
export default Attendance;

*/


/*
import React, { useEffect, useState } from 'react';
import './Shift.css';
import { updateShift } from '../../services/api'; // Adjust the path if `api.js` is located elsewhere

const Shift = () => {
  const [shifts, setShifts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [modifiedShifts, setModifiedShifts] = useState({});

  // Utility function to format enum values (capitalize first letter, lowercase the rest)
  const formatEnum = (value) => {
    if (!value) return '';
    return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();
  };

  // Fetch shift data from the backend API
  useEffect(() => {
    const fetchShiftData = async () => {
      try {
        const response = await fetch('/api/shifts');
        if (!response.ok) {
          throw new Error('Failed to fetch shifts');
        }
        const data = await response.json();

        // Ensure `data` is an array before setting it to `shifts`
        setShifts(Array.isArray(data) ? data : []);
      } catch (error) {
        console.error('Error fetching shift data:', error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchShiftData();
  }, []);

  const handleTimeChange = (index, field, value) => {
    const updatedShifts = [...shifts];
    updatedShifts[index][field] = value;
    setShifts(updatedShifts);

    // Mark the shift as modified
    setModifiedShifts((prevModified) => ({
      ...prevModified,
      [index]: true,
    }));
  };
/*
  // Function to calculate duration between startTime and endTime
  const calculateDuration = (startTime, endTime) => {
    const start = new Date(`1970-01-01T${startTime}:00`);
    const end = new Date(`1970-01-01T${endTime}:00`);

    // Handle case where end time is after midnight (e.g., 10:00 to 02:00)
    if (end < start) {
      end.setDate(end.getDate() + 1);
    }

    const diff = (end - start) / (1000 * 60); // Difference in minutes
    const hours = Math.floor(diff / 60);
    const minutes = diff % 60;
    return `${hours}:${minutes.toString().padStart(2, '0')}`;
  };




  const handleSave = async (index) => {
    const shiftToSave = shifts[index];
    const id = shiftToSave.shiftId;
    const shiftData = {
      shiftType: shiftToSave.shiftType,
      startTime: shiftToSave.startTime,
      endTime: shiftToSave.endTime,
      department: shiftToSave.department,
    };

    const confirmed = window.confirm("Are you sure you want to save the changes?");
    if (!confirmed) return;

    try {
      const response = await updateShift(id, shiftData);
      console.log('Shift saved successfully:', response);
    } catch (error) {
      console.error('Error saving shift:', error);
    }
  };

  return (
    <div>
      <header>
        <h2 style={{ marginBottom: '20px' }}>Shift Details</h2>
      </header>

      {loading && <p>Loading...</p>}
      {error && <p style={{ color: 'red' }}>{error}</p>}

      {!loading && !error && (
        <table border="1" style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead>
            <tr>
              <th>Department</th>
              <th>Shift Type</th>
              <th>Shift Period</th> {/* Moved Shift Period column here 
              <th>Start Time</th>
              <th>End Time</th>
              <th>Shift Duration</th>
              <th></th> {/* Column for the Save button 
            </tr>
          </thead>
          <tbody>
            {shifts.map((shift, index) => (
              <tr key={index}>
                <td>{shift.department ? shift.department.name : 'N/A'}</td>
                <td>{shift.shiftType}</td>
                <td>{formatEnum(shift.shiftPeriod)}</td> {/* Display formatted Shift Period 
                <td>
                  <input
                    type="time"
                    value={shift.startTime}
                    onChange={(e) => handleTimeChange(index, 'startTime', e.target.value)}
                  />
                </td>
                <td>
                  <input
                    type="time"
                    value={shift.endTime}
                    onChange={(e) => handleTimeChange(index, 'endTime', e.target.value)}
                  />
                </td>
                <td>{calculateDuration(shift.startTime, shift.endTime)}</td>
                <td>
                  {/* Display Save button only if the shift has been modified 
                  {modifiedShifts[index] && (
                    <button className="save-button" onClick={() => handleSave(index)}>
                      Save
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default Shift;
*/

/*
import React, { useState } from 'react';
import {
  TableCell,
  TextField,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Checkbox,
  Box,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';

const LateHoursCell = ({ day, index, handleFieldChange }) => {
  const [expanded, setExpanded] = useState(false);
  const [lateClockInsChecked, setLateClockInsChecked] = useState(true);
  const [earlyClockOutsChecked, setEarlyClockOutsChecked] = useState(true);

  const handleExpandClick = () => setExpanded(!expanded);

  const calculateTotalLateHours = (lateHours, earlyOutHours, lateChecked, earlyOutChecked) => {
    let total = 0;
    if (lateChecked) total += lateHours || 0;
    if (earlyOutChecked) total += earlyOutHours || 0;
    return total;
  };

  const handleLateClockInsChange = (event) => {
    const value = Number(event.target.value);
    const updatedTotal = calculateTotalLateHours(value, day.earlyClockOutHours || 0, lateClockInsChecked, earlyClockOutsChecked);
    handleFieldChange(index, 'lateClockInHours', value); // Update late clock-in hours specifically
    handleFieldChange(index, 'lateHours', updatedTotal); // Update total late hours
  };

  const handleEarlyClockOutChange = (event) => {
    const value = Number(event.target.value);
    const updatedTotal = calculateTotalLateHours(day.lateClockInHours || 0, value, lateClockInsChecked, earlyClockOutsChecked);
    handleFieldChange(index, 'earlyClockOutHours', value); // Update early clock-out hours specifically
    handleFieldChange(index, 'lateHours', updatedTotal); // Update total late hours
  };

  const handleCheckboxChange = (type) => {
    if (type === 'late') {
      const newChecked = !lateClockInsChecked;
      setLateClockInsChecked(newChecked);
      const updatedTotal = calculateTotalLateHours(day.lateClockInHours || 0, day.earlyClockOutHours || 0, newChecked, earlyClockOutsChecked);
      handleFieldChange(index, 'lateHours', updatedTotal);
    }
    if (type === 'early') {
      const newChecked = !earlyClockOutsChecked;
      setEarlyClockOutsChecked(newChecked);
      const updatedTotal = calculateTotalLateHours(day.lateClockInHours || 0, day.earlyClockOutHours || 0, lateClockInsChecked, newChecked);
      handleFieldChange(index, 'lateHours', updatedTotal);
    }
  };

  return (
    <TableCell>
      <Accordion expanded={expanded} onChange={handleExpandClick}>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography>{day.lateHours || 0}</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={lateClockInsChecked}
              onChange={() => handleCheckboxChange('late')}
            />
            <TextField
              label="Late Clock-In Hours"
              type="number"
              value={day.lateClockInHours || 0}
              onChange={handleLateClockInsChange}
              disabled={!lateClockInsChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
            />
          </Box>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={earlyClockOutsChecked}
              onChange={() => handleCheckboxChange('early')}
            />
            <TextField
              label="Early Clock-Out Hours"
              type="number"
              value={day.earlyClockOutHours || 0}
              onChange={handleEarlyClockOutChange}
              disabled={!earlyClockOutsChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
            />
          </Box>
        </AccordionDetails>
      </Accordion>
    </TableCell>
  );
};

export default LateHoursCell;

*/

/*
import React, { useState, useEffect } from 'react';
import {
  TableCell,
  TextField,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Checkbox,
  Box,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';

const LateHoursCell = ({ day, index, handleFieldChange }) => {
  const [expanded, setExpanded] = useState(false);
  const [lateClockInsChecked, setLateClockInsChecked] = useState(day.lateClockInHours > 0);
  const [earlyClockOutsChecked, setEarlyClockOutsChecked] = useState(day.earlyClockOutHours > 0);

  const handleExpandClick = () => setExpanded(!expanded);

  const calculateTotalLateHours = (lateHours, earlyOutHours, lateChecked, earlyOutChecked) => {
    let total = 0;
    if (lateChecked) total += lateHours || 0;
    if (earlyOutChecked) total += earlyOutHours || 0;
    return total;
  };

  const handleLateClockInsChange = (event) => {
    const value = Number(event.target.value);
    const updatedTotal = calculateTotalLateHours(value, day.earlyClockOutHours || 0, lateClockInsChecked, earlyClockOutsChecked);
    handleFieldChange(index, 'lateClockInHours', value); // Update late clock-in hours specifically
    handleFieldChange(index, 'lateHours', updatedTotal); // Update total late hours
  };

  const handleEarlyClockOutChange = (event) => {
    const value = Number(event.target.value);
    const updatedTotal = calculateTotalLateHours(day.lateClockInHours || 0, value, lateClockInsChecked, earlyClockOutsChecked);
    handleFieldChange(index, 'earlyClockOutHours', value); // Update early clock-out hours specifically
    handleFieldChange(index, 'lateHours', updatedTotal); // Update total late hours
  };

  const handleCheckboxChange = (type) => {
    if (type === 'late') {
      const newChecked = !lateClockInsChecked;
      setLateClockInsChecked(newChecked);
      const updatedTotal = calculateTotalLateHours(day.lateClockInHours || 0, day.earlyClockOutHours || 0, newChecked, earlyClockOutsChecked);
      handleFieldChange(index, 'lateHours', updatedTotal);
    }
    if (type === 'early') {
      const newChecked = !earlyClockOutsChecked;
      setEarlyClockOutsChecked(newChecked);
      const updatedTotal = calculateTotalLateHours(day.lateClockInHours || 0, day.earlyClockOutHours || 0, lateClockInsChecked, newChecked);
      handleFieldChange(index, 'lateHours', updatedTotal);
    }
  };

  useEffect(() => {
    // Sync the checkbox state with the values when they change
    setLateClockInsChecked(day.lateClockInHours > 0);
    setEarlyClockOutsChecked(day.earlyClockOutHours > 0);
  }, [day]);

  return (
    <TableCell>
      <Accordion expanded={expanded} onChange={handleExpandClick}>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography>{day.lateHours || 0}</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={lateClockInsChecked}
              onChange={() => handleCheckboxChange('late')}
            />
            <TextField
              label="Late Clock-In Hours"
              type="number"
              value={day.lateClockInHours || 0}
              onChange={handleLateClockInsChange}
              disabled={!lateClockInsChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
              inputProps={{ min: 0 }} // Prevent negative input
            />
          </Box>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={earlyClockOutsChecked}
              onChange={() => handleCheckboxChange('early')}
            />
            <TextField
              label="Early Clock-Out Hours"
              type="number"
              value={day.earlyClockOutHours || 0}
              onChange={handleEarlyClockOutChange}
              disabled={!earlyClockOutsChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
              inputProps={{ min: 0 }} // Prevent negative input
            />
          </Box>
        </AccordionDetails>
      </Accordion>
    </TableCell>
  );
};

export default LateHoursCell;

*/


/*
import React, { useState, useEffect } from 'react';
import {
  TableCell,
  TextField,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Checkbox,
  Box,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';


const LateHoursCell = ({ day, index, handleFieldChange }) => {
  const [expanded, setExpanded] = useState(false);
  const [lateClockInsChecked, setLateClockInsChecked] = useState(day.lateClockInHours > 0);
  const [earlyClockOutsChecked, setEarlyClockOutsChecked] = useState(day.earlyClockOutHours > 0);

  const handleExpandClick = () => setExpanded(!expanded);

  /*
  const calculateTotalLateHours = (lateHours, earlyOutHours, lateChecked, earlyOutChecked) => {
    let total = 0;
    if (lateChecked) total += lateHours || 0;
    if (earlyOutChecked) total += earlyOutHours || 0;
    return total;
  };
  

  const calculateTotalLateHours = (lateHours, earlyOutHours, lateChecked, earlyOutChecked) => {
    console.log('lateHours:', lateHours, 'earlyOutHours:', earlyOutHours, 'lateChecked:', lateChecked, 'earlyOutChecked:', earlyOutChecked);
    let total = 0;
    if (lateChecked) total += lateHours || 0;
    if (earlyOutChecked) total += earlyOutHours || 0;
    console.log('Total Late Hours:', total);
    return total;
  };
  

  const handleLateClockInsChange = (event) => {
    const value = Number(event.target.value);
    const updatedTotal = calculateTotalLateHours(value, day.earlyClockOutHours || 0, lateClockInsChecked, earlyClockOutsChecked);
    handleFieldChange(index, 'lateClockInHours', value); // Update late clock-in hours specifically
    handleFieldChange(index, 'lateHours', updatedTotal); // Update total late hours
  };

  const handleEarlyClockOutChange = (event) => {
    const value = Number(event.target.value);
    const updatedTotal = calculateTotalLateHours(day.lateClockInHours || 0, value, lateClockInsChecked, earlyClockOutsChecked);
    handleFieldChange(index, 'earlyClockOutHours', value); // Update early clock-out hours specifically
    handleFieldChange(index, 'lateHours', updatedTotal); // Update total late hours
  };

  const handleCheckboxChange = (type) => {
    if (type === 'late') {
      const newChecked = !lateClockInsChecked;
      setLateClockInsChecked(newChecked);
      const updatedTotal = calculateTotalLateHours(day.lateClockInHours || 0, day.earlyClockOutHours || 0, newChecked, earlyClockOutsChecked);
      handleFieldChange(index, 'lateHours', updatedTotal);
    }
    if (type === 'early') {
      const newChecked = !earlyClockOutsChecked;
      setEarlyClockOutsChecked(newChecked);
      const updatedTotal = calculateTotalLateHours(day.lateClockInHours || 0, day.earlyClockOutHours || 0, lateClockInsChecked, newChecked);
      handleFieldChange(index, 'lateHours', updatedTotal);
    }
  };

  useEffect(() => {
    // Sync the checkbox state with the values when they change
    setLateClockInsChecked(day.lateClockInHours > 0);
    setEarlyClockOutsChecked(day.earlyClockOutHours > 0);
  }, [day]);

  return (
    <TableCell>
      <Accordion expanded={expanded} onChange={handleExpandClick}>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography>{day.lateHours || 0}</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={lateClockInsChecked}
              onChange={() => handleCheckboxChange('late')}
            />
            <TextField
              label="Late Clock-In Hours"
              type="number"
              value={day.lateClockInHours || 0}
              onChange={handleLateClockInsChange}
              disabled={!lateClockInsChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
              inputProps={{ min: 0 }} // Prevent negative input
            />
          </Box>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={earlyClockOutsChecked}
              onChange={() => handleCheckboxChange('early')}
            />
            <TextField
              label="Early Clock-Out Hours"
              type="number"
              value={day.earlyClockOutHours || 0}
              onChange={handleEarlyClockOutChange}
              disabled={!earlyClockOutsChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
              inputProps={{ min: 0 }} // Prevent negative input
            />
          </Box>
        </AccordionDetails>
      </Accordion>
    </TableCell>
  );
};

export default LateHoursCell;
*/



/*
import React, { useState, useEffect } from 'react';
import {
  TableCell,
  TextField,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Checkbox,
  Box,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';


const LateHoursCell = ({ day, index, handleFieldChange }) => {
  const [expanded, setExpanded] = useState(false);
  const [lateClockInsChecked, setLateClockInsChecked] = useState(day.lateClockInHours > 0);
  const [earlyClockOutsChecked, setEarlyClockOutsChecked] = useState(day.earlyClockOutHours > 0);

  const handleExpandClick = () => setExpanded(!expanded);

  const calculateTotalLateHours = (lateHours, earlyOutHours, lateChecked, earlyOutChecked) => {
    let total = 0;
    if (lateChecked) total += lateHours || 0;
    if (earlyOutChecked) total += earlyOutHours || 0;
    return total;
  };

  const handleLateClockInsChange = (event) => {
    const value = Number(event.target.value);
    const updatedTotal = calculateTotalLateHours(value, day.earlyClockOutHours || 0, lateClockInsChecked, earlyClockOutsChecked);
    handleFieldChange(index, 'lateClockInHours', value);
    handleFieldChange(index, 'lateHours', updatedTotal);
  };

  const handleEarlyClockOutChange = (event) => {
    const value = Number(event.target.value);
    const updatedTotal = calculateTotalLateHours(day.lateClockInHours || 0, value, lateClockInsChecked, earlyClockOutsChecked);
    handleFieldChange(index, 'earlyClockOutHours', value);
    handleFieldChange(index, 'lateHours', updatedTotal);
  };

  const handleCheckboxChange = (type) => {
    if (type === 'late') {
      const newChecked = !lateClockInsChecked;
      setLateClockInsChecked(newChecked);
      const updatedTotal = calculateTotalLateHours(day.lateClockInHours || 0, day.earlyClockOutHours || 0, newChecked, earlyClockOutsChecked);
      handleFieldChange(index, 'lateHours', updatedTotal);
    }
    if (type === 'early') {
      const newChecked = !earlyClockOutsChecked;
      setEarlyClockOutsChecked(newChecked);
      const updatedTotal = calculateTotalLateHours(day.lateClockInHours || 0, day.earlyClockOutHours || 0, lateClockInsChecked, newChecked);
      handleFieldChange(index, 'lateHours', updatedTotal);
    }
  };

  useEffect(() => {
    setLateClockInsChecked(day.lateClockInHours > 0);
    setEarlyClockOutsChecked(day.earlyClockOutHours > 0);
  }, [day]);

  return (
    <TableCell>
      <Accordion expanded={expanded} onChange={handleExpandClick}>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography>{day.lateHours || 0}</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={lateClockInsChecked}
              onChange={() => handleCheckboxChange('late')}
            />
            <TextField
              label="Late Clock-In Hours"
              type="number"
              value={day.lateClockInHours || 0}
              onChange={handleLateClockInsChange}
              disabled={!lateClockInsChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
              inputProps={{ min: 0 }}
            />
          </Box>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={earlyClockOutsChecked}
              onChange={() => handleCheckboxChange('early')}
            />
            <TextField
              label="Early Clock-Out Hours"
              type="number"
              value={day.earlyClockOutHours || 0}
              onChange={handleEarlyClockOutChange}
              disabled={!earlyClockOutsChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
              inputProps={{ min: 0 }}
            />
          </Box>
        </AccordionDetails>
      </Accordion>
    </TableCell>
  );
};


export default LateHoursCell;
*/



/*
import React, { useState } from 'react';
import {
  TableCell,
  TextField,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Checkbox,
  Box,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { formatHourMins } from '../../util/DateTimeUtil';

const LateHoursCell = ({ day, index, handleFieldChange }) => {
  const [expanded, setExpanded] = useState(false);
  const [lcLateClockInChecked, setLcLateClockInChecked] = useState(true);
  const [lcEarlyClockOutChecked, setLcEarlyClockOutChecked] = useState(true);

  const handleExpandClick = () => setExpanded(!expanded);

  const calculateTotalLateMins = (late = 0, early = 0, lateChecked, earlyChecked) => {
    let total = 0;
    if (lateChecked) total += late;
    if (earlyChecked) total += early;
    return total;
  };

  const handleLateClockinChange = (event) => {
    const value = Number(event.target.value) || 0;
    const updatedTotal = calculateTotalLateMins(
      value,
      day.lcEarlyClockoutMins || 0,
      lcLateClockInChecked,
      lcEarlyClockOutChecked
    );
    handleFieldChange(index, 'lcLateClockinMins', value);
    handleFieldChange(index, 'lateMins', updatedTotal);
  };

  const handleLcEarlyClockoutChange = (event) => {
    const value = Number(event.target.value) || 0;
    const updatedTotal = calculateTotalLateMins(
      day.lcLateClockinMins || 0,
      value,
      lcLateClockInChecked,
      lcEarlyClockOutChecked
    );
    handleFieldChange(index, 'lcEarlyClockoutMins', value);
    handleFieldChange(index, 'lateMins', updatedTotal);
  };

  const handleCheckboxChange = (type) => {
    let newChecked;
    if (type === 'late') {
      newChecked = !lcLateClockInChecked;
      setLcLateClockInChecked(newChecked);
    } else if (type === 'early') {
      newChecked = !lcEarlyClockOutChecked;
      setLcEarlyClockOutChecked(newChecked);
    }
    const updatedTotal = calculateTotalLateMins(
      day.lcLateClockinMins || 0,
      day.lcEarlyClockoutMins || 0,
      lcLateClockInChecked,
      lcEarlyClockOutChecked
    );
    handleFieldChange(index, 'lateMins', updatedTotal);
  };

  return (
    <TableCell>
      <Accordion expanded={expanded} onChange={handleExpandClick}>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography>{formatHourMins(day.lateMins || 0)}</Typography>
        </AccordionSummary>
        
        <AccordionDetails>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={lcLateClockInChecked}
              onChange={() => handleCheckboxChange('late')}
            />
            <TextField
              label="Late Clock In Minutes"
              type="string"
              value={formatHourMins(day.lcLateClockinMins)}
              onChange={handleLateClockinChange}
              disabled={!lcLateClockInChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
            />
          </Box>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={lcEarlyClockOutChecked}
              onChange={() => handleCheckboxChange('early')}
            />
            <TextField
              label="Early Clock Out Minutes"
              type="string"
              value={formatHourMins(day.lcEarlyClockoutMins)}
              onChange={handleLcEarlyClockoutChange}
              disabled={!lcEarlyClockOutChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
            />
          </Box>
        </AccordionDetails>
      </Accordion>
    </TableCell>
  );
};

export default LateHoursCell;

*/

/*
import React, { useState } from 'react';
import {
  TableCell,
  TextField,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Checkbox,
  Box,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { formatHourMins } from '../../util/DateTimeUtil';

const LateHoursCell = ({ day, index, handleFieldChange }) => {
  const [expanded, setExpanded] = useState(false);
  const [lcLateClockInChecked, setLcLateClockInChecked] = useState(true);
  const [lcEarlyClockOutChecked, setLcEarlyClockOutChecked] = useState(true);

  const handleExpandClick = () => setExpanded(!expanded);

  const calculateTotalLateMins = (late = 0, early = 0, lateChecked, earlyChecked) => {
    let total = 0;
    if (lateChecked) total += late;
    if (earlyChecked) total += early;
    return total;
  };

  const handleLateClockinChange = (event) => {
    const value = Number(event.target.value) || 0;
    const updatedTotal = calculateTotalLateMins(
      value,
      day.lcEarlyClockoutMins || 0,
      lcLateClockInChecked,
      lcEarlyClockOutChecked
    );
    handleFieldChange(index, 'lcLateClockinMins', value);
    handleFieldChange(index, 'lateMins', updatedTotal);
  };

  const handleLcEarlyClockoutChange = (event) => {
    const value = Number(event.target.value) || 0;
    const updatedTotal = calculateTotalLateMins(
      day.lcLateClockinMins || 0,
      value,
      lcLateClockInChecked,
      lcEarlyClockOutChecked
    );
    handleFieldChange(index, 'lcEarlyClockoutMins', value);
    handleFieldChange(index, 'lateMins', updatedTotal);
  };

  const handleCheckboxChange = (type) => {
    let newChecked;
    if (type === 'late') {
      newChecked = !lcLateClockInChecked;
      setLcLateClockInChecked(newChecked);
    } else if (type === 'early') {
      newChecked = !lcEarlyClockOutChecked;
      setLcEarlyClockOutChecked(newChecked);
    }
    const updatedTotal = calculateTotalLateMins(
      day.lcLateClockinMins || 0,
      day.lcEarlyClockoutMins || 0,
      lcLateClockInChecked,
      lcEarlyClockOutChecked
    );
    handleFieldChange(index, 'lateMins', updatedTotal);
  };

  return (
    <TableCell>
      <Accordion expanded={expanded} onChange={handleExpandClick}>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography>{formatHourMins(day.lateMins || 0)}</Typography>
        </AccordionSummary>
        
        <AccordionDetails>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={lcLateClockInChecked}
              onChange={() => handleCheckboxChange('late')}
            />
            <TextField
              label="Late Clock In Minutes"
              type="number"
              value={day.lcLateClockinMins || 0}
              onChange={handleLateClockinChange}
              disabled={!lcLateClockInChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
              helperText={`hh:mm - ${formatHourMins(day.lcLateClockinMins || 0)}`}
            />
          </Box>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={lcEarlyClockOutChecked}
              onChange={() => handleCheckboxChange('early')}
            />
            <TextField
              label="Early Clock Out Minutes"
              type="number"
              value={day.lcEarlyClockoutMins || 0}
              onChange={handleLcEarlyClockoutChange}
              disabled={!lcEarlyClockOutChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
              helperText={`hh:mm - ${formatHourMins(day.lcEarlyClockoutMins || 0)}`}
            />
          </Box>
        </AccordionDetails>
      </Accordion>
    </TableCell>
  );
};

export default LateHoursCell;
*/
/*
import React, { useState } from 'react';
import {
  TableCell,
  TextField,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Checkbox,
  Box,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { formatHourMins } from '../../util/DateTimeUtil';

const LateHoursCell = ({ day, index, handleFieldChange }) => {
  const [expanded, setExpanded] = useState(false);
  const [lcLateClockInChecked, setLcLateClockInChecked] = useState(true);
  const [lcEarlyClockOutChecked, setLcEarlyClockOutChecked] = useState(true);

  const handleExpandClick = () => setExpanded(!expanded);

  const calculateTotalLateMins = (late = 0, early = 0, lateChecked, earlyChecked) => {
    let total = 0;
    if (lateChecked) total += late;
    if (earlyChecked) total += early;
    return total;
  };

  const handleLateClockinChange = (event) => {
    const value = Number(event.target.value) || 0;
    const updatedTotal = calculateTotalLateMins(
      value,
      day.lcEarlyClockoutMins || 0,
      lcLateClockInChecked,
      lcEarlyClockOutChecked
    );
    handleFieldChange(index, 'updatedcLateClockinMins', value);
    handleFieldChange(index, 'lateMins', updatedTotal);
  };

  const handleLcEarlyClockoutChange = (event) => {
    const value = Number(event.target.value) || 0;
    const updatedTotal = calculateTotalLateMins(
      day.lcLateClockinMins || 0,
      value,
      lcLateClockInChecked,
      lcEarlyClockOutChecked
    );
    handleFieldChange(index, 'updatedLcLateClockinMins', value);
    handleFieldChange(index, 'lateMins', updatedTotal);
  };


/*

  const handleCheckboxChange = (type) => {
    let newCheckedLateClockIn = lcLateClockInChecked;
    let newCheckedEarlyClockOut = lcEarlyClockOutChecked;
  
    if (type === 'late') {
      newCheckedLateClockIn = !lcLateClockInChecked;
      setLcLateClockInChecked(newCheckedLateClockIn);
    } else if (type === 'early') {
      newCheckedEarlyClockOut = !lcEarlyClockOutChecked;
      setLcEarlyClockOutChecked(newCheckedEarlyClockOut);
    }
  
    // Recalculate total late minutes based on updated checkbox states
    const updatedTotal = calculateTotalLateMins(
      day.lcLateClockinMins || 0,
      day.lcEarlyClockoutMins || 0,
      newCheckedLateClockIn,
      newCheckedEarlyClockOut
    );
  
    handleFieldChange(index, 'lateMins', updatedTotal);
  };
  */

  /*
  const handleCheckboxChange = (type) => {
    let newCheckedLateClockIn = lcLateClockInChecked;
    let newCheckedEarlyClockOut = lcEarlyClockOutChecked;
  
    if (type === 'late') {
      newCheckedLateClockIn = !lcLateClockInChecked;
      setLcLateClockInChecked(newCheckedLateClockIn);
    } else if (type === 'early') {
      newCheckedEarlyClockOut = !lcEarlyClockOutChecked;
      setLcEarlyClockOutChecked(newCheckedEarlyClockOut);
    }
  
    // Recalculate total late minutes based on updated checkbox states
    const updatedTotal = calculateTotalLateMins(
      day.lcLateClockinMins || 0,
      day.lcEarlyClockoutMins || 0,
      newCheckedLateClockIn,
      newCheckedEarlyClockOut
    );
  
    handleFieldChange(index, 'lateMins', updatedTotal);
    handleFieldChange(index, 'updatedLcLateClockinMins', day.updatedLcLateClockinMins);
    handleFieldChange(index, 'updatedLcEarlyClockoutMins', day.updatedLcEarlyClockoutMins);
  };
  

  const handleCheckboxChange = (type) => {
    const isLate = type === 'late';
    const updatedCheckedState = isLate ? !lcLateClockInChecked : !lcEarlyClockOutChecked;
  
    if (isLate) setLcLateClockInChecked(updatedCheckedState);
    else setLcEarlyClockOutChecked(updatedCheckedState);
  
    const updatedTotal = calculateTotalLateMins(
      day.lcLateClockinMins || 0,
      day.lcEarlyClockoutMins || 0,
      isLate ? updatedCheckedState : lcLateClockInChecked,
      !isLate ? updatedCheckedState : lcEarlyClockOutChecked
    );
  
    const updatedDay = {
      ...day,
      updatedLcLateClockinMins: lcLateClockInChecked ? day.lcLateClockinMins || 0 : 0,
      updatedLcEarlyClockoutMins: lcEarlyClockOutChecked ? day.lcEarlyClockoutMins || 0 : 0,
      lateMins: updatedTotal,
    };
  
    handleFieldChange(index, 'lateMins', updatedTotal);
    handleFieldChange(index, 'updatedLcLateClockinMins', updatedDay.updatedLcLateClockinMins);
    handleFieldChange(index, 'updatedLcEarlyClockoutMins', updatedDay.updatedLcEarlyClockoutMins);
  };
 
  return (
    <TableCell>
      <Accordion expanded={expanded} onChange={handleExpandClick}>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography>{formatHourMins(day.lateMins || 0)}</Typography>
        </AccordionSummary>
        
        <AccordionDetails>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={lcLateClockInChecked}
              onChange={() => handleCheckboxChange('late')}
            />
            <TextField
              label="Late Clock In Minutes"
              type="number"
              value={day.lcLateClockinMins || 0}
              onChange={handleLateClockinChange}
              disabled={!lcLateClockInChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
              helperText={`hh:mm - ${formatHourMins(day.lcLateClockinMins || 0)}`}
            />
          </Box>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={lcEarlyClockOutChecked}
              onChange={() => handleCheckboxChange('early')}
            />
            <TextField
              label="Early Clock Out Minutes"
              type="number"
              value={day.lcEarlyClockoutMins || 0}
              onChange={handleLcEarlyClockoutChange}
              disabled={!lcEarlyClockOutChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
              helperText={`hh:mm - ${formatHourMins(day.lcEarlyClockoutMins || 0)}`}
            />
          </Box>
        </AccordionDetails>
      </Accordion>
    </TableCell>
  );
};

export default LateHoursCell;

*/


/*
import React, { useState } from 'react';
import {
  TableCell,
  TextField,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Checkbox,
  Box,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { formatHourMins } from '../../util/DateTimeUtil';

const OTHoursCell = ({ day, index, handleFieldChange }) => {
  const [expanded, setExpanded] = useState(false);
  const [earlyClockInsChecked, setEarlyClockInsChecked] = useState(true);
  const [afterHoursChecked, setAfterHoursChecked] = useState(true);

  // Local state for updated OT values
  const [updatedEarlyClockinMins, setUpdatedEarlyClockinMins] = useState(day.otEarlyClockinMins || 0);
  const [updatedLateClockoutMins, setUpdatedLateClockoutMins] = useState(day.otLateClockoutMins || 0);

  const handleExpandClick = () => setExpanded(!expanded);

  const calculateTotalOTMins = (early, after, earlyChecked, afterChecked) => {
    let total = 0;
    if (earlyChecked) total += early || 0;
    if (afterChecked) total += after || 0;
    return total;
  };

  const handleEarlyClockInsChange = (event) => {
    const value = Math.max(0, Number(event.target.value)); // Prevent negative values
    setUpdatedEarlyClockinMins(value);

    const updatedTotal = calculateTotalOTMins(value, updatedLateClockoutMins, earlyClockInsChecked, afterHoursChecked);
    handleFieldChange(index, 'updatedOtEarlyClockinMins', value);
    handleFieldChange(index, 'otMins', updatedTotal);
  };

  const handleAfterHoursChange = (event) => {
    const value = Math.max(0, Number(event.target.value)); // Prevent negative values
    setUpdatedLateClockoutMins(value);

    const updatedTotal = calculateTotalOTMins(updatedEarlyClockinMins, value, earlyClockInsChecked, afterHoursChecked);
    handleFieldChange(index, 'updatedOtLateClockoutMins', value);
    handleFieldChange(index, 'otMins', updatedTotal);
  };

  const handleCheckboxChange = (type) => {
    if (type === 'early') {
      const newChecked = !earlyClockInsChecked;
      setEarlyClockInsChecked(newChecked);

      const updatedTotal = calculateTotalOTMins(updatedEarlyClockinMins, updatedLateClockoutMins, newChecked, afterHoursChecked);
      handleFieldChange(index, 'otMins', updatedTotal);
    }
    if (type === 'after') {
      const newChecked = !afterHoursChecked;
      setAfterHoursChecked(newChecked);

      const updatedTotal = calculateTotalOTMins(updatedEarlyClockinMins, updatedLateClockoutMins, earlyClockInsChecked, newChecked);
      handleFieldChange(index, 'otMins', updatedTotal);
    }
  };

  return (
    <TableCell>
      <Accordion expanded={expanded} onChange={handleExpandClick}>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography>{formatHourMins(day.otMins)}</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={earlyClockInsChecked}
              onChange={() => handleCheckboxChange('early')}
            />
            <TextField
              label="Early OT in minutes"
              type="number"
              value={day.updatedEarlyClockinMins || 0}
              onChange={handleEarlyClockInsChange}
              disabled={!earlyClockInsChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
              helperText={`hh:mm - ${formatHourMins(day.updatedEarlyClockinMins)}`}
            />
          </Box>
          <Box display="flex" alignItems="center" mb={2}>
            <Checkbox
              checked={afterHoursChecked}
              onChange={() => handleCheckboxChange('after')}
            />
            <TextField
              label="After OT in minutes"
              type="number"
              value={day.updatedLateClockoutMins ||0}
              onChange={handleAfterHoursChange}
              disabled={!afterHoursChecked}
              variant="outlined"
              size="small"
              fullWidth
              margin="dense"
              helperText={`hh:mm - ${formatHourMins(day.updatedLateClockoutMins)}`}
            />
          </Box>
        </AccordionDetails>
      </Accordion>
    </TableCell>
  );
};

export default OTHoursCell;

*/





