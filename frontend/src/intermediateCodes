/*
import React, { useEffect, useState } from 'react';
import { fetchEmployees } from '../../services/api';
import { Link } from 'react-router-dom';
import './Employee.css'
function Employee() {
    const [employees, setEmployees] = useState([]); // State to hold employee data
    const [loading, setLoading] = useState(true); // Loading state
  
    // Fetch employees data from API
    useEffect(() => {
      const fetchEmployeeData = async () => {
        try {
          const response = await fetchEmployees();
          setEmployees(response);
        } catch (error) {
          console.error('Error fetching employee data:', error);
        } finally {
          setLoading(false);
        }
      };
  
      fetchEmployeeData();
    }, []);
  
    return (
        <div>
            <header>
                <h2>Employee Details</h2>
            </header>
          <table>
            <thead>
              <tr>
                <th>Employee ID</th>
                <th>Department</th>
                <th>Name</th>
              </tr>
            </thead>
            <tbody>
              {loading ? (
                <tr>
                  <td colSpan="15" style={{ textAlign: 'center' }}>Loading...</td>
                </tr>
              ) : employees.length > 0 ? (
                employees.map((employee) => (
                  <tr key={employee.employeeId}>
                    <td>{employee.employeeId}</td>
                    <td>{employee.department.name}</td>
                    <td>{employee.shortName}</td>
                    <td>
                      <button>Delete</button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="15" style={{ textAlign: 'center' }}>No Data</td>
                </tr>
              )}
            </tbody>
          </table>
          <div className="buttons">
            <Link to="/add-new-employee">
                <button>Add New Employee</button>
            </Link>
            <button>Update Employee</button>
            <button>Shift Assign</button>
          </div>
        </div>
    );
}
export default Employee;
*/

/*
import React, { useEffect, useState } from 'react';
import { fetchEmployees, deactivateEmployee } from '../../services/api'; // Import API services
import { Link } from 'react-router-dom';
import './Employee.css';

function Employee() {
  const [employees, setEmployees] = useState([]); // State to hold employee data
  const [loading, setLoading] = useState(true); // Loading state

  // Fetch employees data from API
  useEffect(() => {
    const fetchEmployeeData = async () => {
      try {
        const response = await fetchEmployees();
        setEmployees(response);
      } catch (error) {
        console.error('Error fetching employee data:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchEmployeeData();
  }, []);

  // Deactivate an employee
  const handleDeactivate = async (employeeId) => {
    try {
      await deactivateEmployee(employeeId); // Call API to deactivate employee
      // Update the employees list in the UI
      setEmployees((prevEmployees) =>
        prevEmployees.map((employee) =>
          employee.employeeId === employeeId
            ? { ...employee, status: 'INACTIVE' }
            : employee
        )
      );
    } catch (error) {
      console.error('Error deactivating employee:', error);
    }
  };

  return (
    <div>
      <header>
        <h2>Employee Details</h2>
      </header>
      <table>
        <thead>
          <tr>
            <th>Employee ID</th>
            <th>Department</th>
            <th>Name</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {loading ? (
            <tr>
              <td colSpan="5" style={{ textAlign: 'center' }}>Loading...</td>
            </tr>
          ) : employees.length > 0 ? (
            employees.map((employee) => (
              <tr key={employee.employeeId}>
                <td>{employee.employeeId}</td>
                <td>{employee.department.name}</td>
                <td>{employee.shortName}</td>
                <td>{employee.status}</td>
                <td>
                  {employee.status === 'ACTIVE' ? (
                    <button onClick={() => handleDeactivate(employee.employeeId)}>
                      Deactivate
                    </button>
                  ) : (
                    <span>Inactive</span>
                  )}
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="5" style={{ textAlign: 'center' }}>No Data</td>
            </tr>
          )}
        </tbody>
      </table>
      <div className="buttons">
        <Link to="/add-new-employee">
          <button>Add New Employee</button>
        </Link>
        <button>Update Employee</button>
        <button>Shift Assign</button>
      </div>
    </div>
  );
}

export default Employee;

*/


/*
import React, { useState } from 'react';
import { addEmployee } from '../../../services/api'; // Adjust the import path as necessary

function AddNewEmployee() {
    const [shortName, setShortName] = useState('');
  const [department, setDepartment] = useState(null); // Initialize as null
  const [departments] = useState([
    { departmentId: 1, name: 'Kitchen'}
    
  ]);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();

    const employeeData = {
      shortName,
      department,
      employeeType:"PERMANENT",
      status: "ACTIVE"
    };

    try {
      const responseData = await addEmployee(employeeData);
      console.log('Employee added:', responseData);
      setSuccess('Employee added successfully!');
      setError(null);
    } catch (error) {
      console.error('Error:', error);
      setError(error.message);
      setSuccess(null);
    }

    // Clear the form
    setShortName('');
    setDepartment(null); // Reset department selection
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>
          Employee Short Name:
          <input
            type="text"
            value={shortName}
            onChange={(e) => setShortName(e.target.value)}
            required
          />
        </label>
      </div>
      <div>
        <label>
          Department:
          <select
            value={department ? department.departmentId : ''} // Use department ID for select value
            onChange={(e) => {
              const selectedDept = departments.find(dept => dept.departmentId === Number(e.target.value));
              setDepartment(selectedDept || null); // Set the selected department object
            }}
            required
          >
            <option value="">Select a department</option>
            {departments.map((dept) => (
              <option key={dept.departmentId} value={dept.departmentId}>
                {dept.name}
              </option>
            ))}
          </select>
        </label>
      </div>
      <button type="submit">Add</button>
      {error && <p style={{ color: 'red' }}>{error}</p>}
      {success && <p style={{ color: 'green' }}>{success}</p>}
    </form>
  );
};

export default AddNewEmployee;
*/


/*
import React, { useState } from 'react';
import { addEmployee } from '../../../services/api'; // Adjust the import path as necessary

function AddNewEmployee() {
    const [shortName, setShortName] = useState('');
    const [fullName, setFullName] = useState('');
    const [department, setDepartment] = useState(null);
    const [designation, setDesignation] = useState('');
    const [nicNo, setNicNo] = useState('');
    const [employeeType, setEmployeeType] = useState('');
    const [epfNo, setEpfNo] = useState('');

    const departments = [
        { departmentId: 1, name: 'Kitchen' },
        { departmentId: 2, name: 'Steward' },
        { departmentId: 3, name: 'Back Office' },
        { departmentId: 4, name: 'Front Office' },
        { departmentId: 5, name: 'Cleaning & Maintenance' }
    ];

    const [error, setError] = useState(null);
    const [success, setSuccess] = useState(null);

    const handleSubmit = async (e) => {
        e.preventDefault();

        const employeeData = {
            employeeId,
            shortName,
            fullName,
            department,
            designation,
            nicNo,
            employeeType,
            epfNo: employeeType === 'PERMANENT' ? epfNo : '', // Include EPF No if Permanent
            status: "ACTIVE"
        };

        console.log('Employee Data:', employeeData);

        try {
            const responseData = await addEmployee(employeeData);
            console.log('Employee added:', responseData);
            setSuccess('Employee added successfully!');
            setError(null);
        } catch (error) {
            console.error('Error:', error);
            setError(error.message);
            setSuccess(null);
        }

        // Clear the form
        setShortName('');
        setFullName('');
        setDepartment(null);
        setDesignation('');
        setNicNo('');
        setEmployeeType('');
        setEpfNo('');
    };

    return (
        <div className="form-container">
            <form onSubmit={handleSubmit}>
                <div className='add-new-employee'>
                    <label>
                        <span>Employee Short Name:</span>
                        <input
                            type="text"
                            value={shortName}
                            onChange={(e) => setShortName(e.target.value)}
                            required
                        />
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Full Name:</span>
                        <input
                            type="text"
                            value={fullName}
                            onChange={(e) => setFullName(e.target.value)}
                            required
                        />
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Department:</span>
                        <select
                            value={department ? department.departmentId : ''}
                            onChange={(e) => {
                                const selectedDept = departments.find(dept => dept.departmentId === Number(e.target.value));
                                setDepartment(selectedDept || null);
                            }}
                            required
                        >
                            <option value="">Select a department</option>
                            {departments.map((dept) => (
                                <option key={dept.departmentId} value={dept.departmentId}>
                                    {dept.name}
                                </option>
                            ))}
                        </select>
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Designation:</span>
                        <input
                            type="text"
                            value={designation}
                            onChange={(e) => setDesignation(e.target.value)}
                            required
                        />
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>NIC No:</span>
                        <input
                            type="text"
                            value={nicNo}
                            onChange={(e) => setNicNo(e.target.value)}
                            required
                        />
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Employee Type:</span>
                        <select
                            value={employeeType}
                            onChange={(e) => {
                                setEmployeeType(e.target.value);
                                if (e.target.value !== 'PERMANENT') {
                                    setEpfNo(''); // Clear EPF No if not Permanent
                                }
                            }}
                            required
                        >
                            <option value="">Select employee type</option>
                            <option value="PERMANENT">Permanent</option>
                            <option value="TEMPORARY">Temporary</option>
                        </select>
                    </label>
                </div>

                
                {employeeType === 'PERMANENT' && (
                    <div className='add-new-employee'>
                        <label>
                            <span>EPF No:</span>
                            <input
                                type="text"
                                value={epfNo}
                                onChange={(e) => setEpfNo(e.target.value)}
                                required
                            />
                        </label>
                    </div>
                )}

                <button type="submit" className="add-button">Add</button>
                {error && <p style={{ color: 'red' }}>{error}</p>}
                {success && <p style={{ color: 'green' }}>{success}</p>}
            </form>
        </div>
    );
};

export default AddNewEmployee;
*/



/*
import React, { useState, useEffect } from 'react';
import { addEmployee, getLastEmployeeId } from '../../../services/api'; // Adjust the import path as necessary

function AddNewEmployee() {
    const [employeeId, setEmployeeId] = useState(''); // New state for Employee ID input
    const [shortName, setShortName] = useState('');
    const [fullName, setFullName] = useState('');
    const [department, setDepartment] = useState(null);
    const [designation, setDesignation] = useState('');
    const [nicNo, setNicNo] = useState('');
    const [employeeType, setEmployeeType] = useState('');
    const [epfNo, setEpfNo] = useState('');
    const [lastEmployeeId, setLastEmployeeId] = useState(null); // State for displaying the last employee ID

    const departments = [
        { departmentId: 1, name: 'Kitchen' },
        { departmentId: 2, name: 'Steward' },
        { departmentId: 3, name: 'Back Office' },
        { departmentId: 4, name: 'Front Office' },
        { departmentId: 5, name: 'Cleaning & Maintenance' }
    ];

    const [error, setError] = useState(null);
    const [success, setSuccess] = useState(null);

    useEffect(() => {
        // Fetch the last employee ID on component mount
        const fetchLastEmployeeId = async () => {
            try {
                const lastId = await getLastEmployeeId();
                setLastEmployeeId(lastId || 0); // If lastId is null or undefined, set it to 0
            } catch (error) {
                console.error('Error fetching last employee ID:', error);
                setLastEmployeeId(0); // Set lastEmployeeId to 0 in case of an error
            }
        };
        fetchLastEmployeeId();
    }, []);

    const handleSubmit = async (e) => {
        e.preventDefault();

        const employeeData = {
            employeeId,
            shortName,
            fullName,
            department,
            designation,
            nicNo,
            employeeType,
            epfNo: employeeType === 'PERMANENT' ? epfNo : '', // Include EPF No if Permanent
            status: "ACTIVE"
        };

        console.log('Employee Data:', employeeData);

        try {
            const responseData = await addEmployee(employeeData);
            console.log('Employee added:', responseData);
            setSuccess('Employee added successfully!');
            setError(null);
        } catch (error) {
            console.error('Error:', error);
            setError(error.message);
            setSuccess(null);
        }

        // Clear the form
        setEmployeeId('');
        setShortName('');
        setFullName('');
        setDepartment(null);
        setDesignation('');
        setNicNo('');
        setEmployeeType('');
        setEpfNo('');
    };

    return (
        <div className="form-container">
            <form onSubmit={handleSubmit}>
                <div className='add-new-employee'>
                    <label>
                        <span>Last Employee ID: {lastEmployeeId !== null ? lastEmployeeId : 'Loading...'}</span>
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Employee ID:</span>
                        <input
                            type="text"
                            value={employeeId}
                            onChange={(e) => setEmployeeId(e.target.value)}
                            required
                        />
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Employee Short Name:</span>
                        <input
                            type="text"
                            value={shortName}
                            onChange={(e) => setShortName(e.target.value)}
                            required
                        />
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Full Name:</span>
                        <input
                            type="text"
                            value={fullName}
                            onChange={(e) => setFullName(e.target.value)}
                            required
                        />
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Department:</span>
                        <select
                            value={department ? department.departmentId : ''}
                            onChange={(e) => {
                                const selectedDept = departments.find(dept => dept.departmentId === Number(e.target.value));
                                setDepartment(selectedDept || null);
                            }}
                            required
                        >
                            <option value="">Select a department</option>
                            {departments.map((dept) => (
                                <option key={dept.departmentId} value={dept.departmentId}>
                                    {dept.name}
                                </option>
                            ))}
                        </select>
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Designation:</span>
                        <input
                            type="text"
                            value={designation}
                            onChange={(e) => setDesignation(e.target.value)}
                            required
                        />
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>NIC No:</span>
                        <input
                            type="text"
                            value={nicNo}
                            onChange={(e) => setNicNo(e.target.value)}
                            required
                        />
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Employee Type:</span>
                        <select
                            value={employeeType}
                            onChange={(e) => {
                                setEmployeeType(e.target.value);
                                if (e.target.value !== 'PERMANENT') {
                                    setEpfNo(''); // Clear EPF No if not Permanent
                                }
                            }}
                            required
                        >
                            <option value="">Select employee type</option>
                            <option value="PERMANENT">Permanent</option>
                            <option value="TEMPORARY">Temporary</option>
                        </select>
                    </label>
                </div>

                {employeeType === 'PERMANENT' && (
                    <div className='add-new-employee'>
                        <label>
                            <span>EPF No:</span>
                            <input
                                type="text"
                                value={epfNo}
                                onChange={(e) => setEpfNo(e.target.value)}
                                required
                            />
                        </label>
                    </div>
                )}

                <button type="submit" className="add-button">Add</button>
                {error && <p style={{ color: 'red' }}>{error}</p>}
                {success && <p style={{ color: 'green' }}>{success}</p>}
            </form>
        </div>
    );
}

export default AddNewEmployee;
*/

/*
import React, { useState, useEffect } from 'react';
import { addEmployee, getLastEmployeeId } from '../../../services/api'; // Adjust the import path as necessary

function AddNewEmployee() {
    const [employeeId, setEmployeeId] = useState(''); // New state for Employee ID input
    const [shortName, setShortName] = useState('');
    const [fullName, setFullName] = useState('');
    const [department, setDepartment] = useState(null);
    const [designation, setDesignation] = useState('');
    const [nicNo, setNicNo] = useState('');
    const [employeeType, setEmployeeType] = useState('');
    const [epfNo, setEpfNo] = useState('');
    const [lastEmployeeId, setLastEmployeeId] = useState(null); // State for displaying the last employee ID

    const departments = [
        { departmentId: 1, name: 'Kitchen' },
        { departmentId: 2, name: 'Steward' },
        { departmentId: 3, name: 'Back Office' },
        { departmentId: 4, name: 'Front Office' },
        { departmentId: 5, name: 'Cleaning & Maintenance' }
    ];

    const [error, setError] = useState(null);
    const [success, setSuccess] = useState(null);

    useEffect(() => {
        // Fetch the last employee ID on component mount
        const fetchLastEmployeeId = async () => {
            try {
                const lastId = await getLastEmployeeId();
                setLastEmployeeId(lastId || 0); // If lastId is null or undefined, set it to 0
            } catch (error) {
                console.error('Error fetching last employee ID:', error);
                setLastEmployeeId(0); // Set lastEmployeeId to 0 in case of an error
            }
        };
        fetchLastEmployeeId();
    }, []);

    const validateNIC = (nicNumber) => {
        const nicRegex = /^([1-9][0-9]{11}|[1-9][0-9]{9}|[0-9]{9}[vVxX])$/;
        return nicRegex.test(nicNumber);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!validateNIC(nicNo)) {
            setError('Invalid NIC number format!');
            return;
        }

        const employeeData = {
            employeeId: employeeId || (lastEmployeeId + 1), // Auto-generate employee ID based on last employee ID
            shortName,
            fullName,
            department,
            designation,
            nicNo,
            employeeType,
            epfNo: employeeType === 'PERMANENT' ? epfNo : '', // Include EPF No if Permanent
            status: "ACTIVE"
        };

        console.log('Employee Data:', employeeData);

        try {
            const responseData = await addEmployee(employeeData);
            console.log('Employee added:', responseData);
            setSuccess('Employee added successfully!');
            setError(null);
        } catch (error) {
            console.error('Error:', error);
            setError(error.message);
            setSuccess(null);
        }

        // Clear the form after submission
        setEmployeeId('');
        setShortName('');
        setFullName('');
        setDepartment(null);
        setDesignation('');
        setNicNo('');
        setEmployeeType('');
        setEpfNo('');
    };

    return (
        <div className="form-container">
            <form onSubmit={handleSubmit}>
                <div className='add-new-employee'>
                    <label>
                        <span>Last Employee ID: {lastEmployeeId !== null ? lastEmployeeId : 'Loading...'}</span>
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Employee ID:</span>
                        <input
                            type="text"
                            value={employeeId}
                            onChange={(e) => setEmployeeId(e.target.value)}
                           
                        />
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Employee Short Name:</span>
                        <input
                            type="text"
                            value={shortName}
                            onChange={(e) => setShortName(e.target.value)}
                            required
                        />
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Full Name:</span>
                        <input
                            type="text"
                            value={fullName}
                            onChange={(e) => setFullName(e.target.value)}
                            required
                        />
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Department:</span>
                        <select
                            value={department ? department.departmentId : ''}
                            onChange={(e) => {
                                const selectedDept = departments.find(dept => dept.departmentId === Number(e.target.value));
                                setDepartment(selectedDept || null);
                            }}
                            required
                        >
                            <option value="">Select a department</option>
                            {departments.map((dept) => (
                                <option key={dept.departmentId} value={dept.departmentId}>
                                    {dept.name}
                                </option>
                            ))}
                        </select>
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Designation:</span>
                        <input
                            type="text"
                            value={designation}
                            onChange={(e) => setDesignation(e.target.value)}
                            required
                        />
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>NIC No:</span>
                        <input
                            type="text"
                            value={nicNo}
                            onChange={(e) => setNicNo(e.target.value)}
                            required
                        />
                    </label>
                </div>

                <div className='add-new-employee'>
                    <label>
                        <span>Employee Type:</span>
                        <select
                            value={employeeType}
                            onChange={(e) => {
                                setEmployeeType(e.target.value);
                                if (e.target.value !== 'PERMANENT') {
                                    setEpfNo(''); // Clear EPF No if not Permanent
                                }
                            }}
                            required
                        >
                            <option value="">Select employee type</option>
                            <option value="PERMANENT">Permanent</option>
                            <option value="TEMPORARY">Temporary</option>
                        </select>
                    </label>
                </div>

                {employeeType === 'PERMANENT' && (
                    <div className='add-new-employee'>
                        <label>
                            <span>EPF No:</span>
                            <input
                                type="text"
                                value={epfNo}
                                onChange={(e) => setEpfNo(e.target.value)}
                                required
                            />
                        </label>
                    </div>
                )}

                <button type="submit" className="add-button">Add</button>
                {error && <p style={{ color: 'red' }}>{error}</p>}
                {success && <p style={{ color: 'green' }}>{success}</p>}
            </form>
        </div>
    );
}

export default AddNewEmployee;
*/



/*

import React, { useState, useEffect } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  TextField,
  Select,
  MenuItem,
  Typography,
  Button,
} from '@mui/material';
import dayjs from 'dayjs';
import { fetchAttendance, updateAttendanceStatus } from '../../services/api'; // Ensure your api service has the updateAttendanceStatus method

function AttendanceTable(props) {
  const [daysInMonth, setDaysInMonth] = useState([]);

  useEffect(() => {
    const currentMonth = dayjs(`01 ${props.selectedMonth} 2000`, "DD MMMM YYYY").month(); 
    const currentYear = props.selectedYear;
    const days = [];
    const daysInCurrentMonth = dayjs().daysInMonth();

    for (let i = 1; i <= daysInCurrentMonth; i++) {
      const date = dayjs(new Date(currentYear, currentMonth, i));
      const dayOfWeek = date.day();
      days.push({
        date: date.format('YYYY-MM-DD'),
        day: date.format('dddd'),
        dayOfWeek,
        timeIn: '',
        timeOut: '',
        attendanceStatus: 'ab',
        originalAttendanceStatus: 'ab', // Store the original status
        workHours: '',
        leaveType: '',
      });
    }

    setDaysInMonth(days);

    const loadEmployeeAttendance = async () => {
      try {
        const employeeAttendanceList = await fetchAttendance(props.employeeId);
        
        const attendanceMap = {};
        employeeAttendanceList.forEach(record => {
            attendanceMap[record.date] = record;
        });
        console.log(attendanceMap)
        const updatedDays = days.map(day => {
            const attendanceRecord = attendanceMap[day.date];
            if (attendanceRecord) {
                return {
                    ...day,
                    attendanceRecordId:attendanceRecord.attendanceRecordId,
                    timeIn: attendanceRecord.actualStartTime || '',
                    timeOut: attendanceRecord.actualEndTime || '',
                    attendanceStatus: attendanceRecord.attendance || '',
                    originalAttendanceStatus: attendanceRecord.attendance || '', 
                    workHours: attendanceRecord.workHours || '',
                    leaveType: attendanceRecord.leaveType || '',
                };
            }
            return day;
        });
        setDaysInMonth(updatedDays);
      } catch (error) {
        console.error("Error fetching employee attendance:", error);
      }
    };

    loadEmployeeAttendance();
  }, [props.employeeId, props.selectedMonth, props.selectedYear]);

  const handleFieldChange = (index, field, value) => {
    const updatedDays = [...daysInMonth];
    updatedDays[index][field] = value;

    // If the attendance status is changed, set the new status
    if (field === 'attendanceStatus') {
        updatedDays[index].attendanceStatus = value;
    }

    setDaysInMonth(updatedDays);
};



const handleSave = async (index) => {
  const day = daysInMonth[index];
  if (day.attendanceStatus !== day.originalAttendanceStatus) {
      try {
          await updateAttendanceStatus(day.attendanceRecordId, day.attendanceStatus);
          // Update the original status after saving
          const updatedDays = [...daysInMonth];
          updatedDays[index].originalAttendanceStatus = day.attendanceStatus;
          setDaysInMonth(updatedDays);
          alert('Attendance status updated successfully');
      } catch (error) {
          console.error('Error updating attendance status:', error);
          alert('Failed to update attendance status');
      }
  }
};


  return (
    <TableContainer component={Paper} style={{ margin: 'auto' }}>
      <Table>
        <TableHead>
          <TableRow>
            <TableCell>Date</TableCell>
            <TableCell>Time In</TableCell>
            <TableCell>Time Out</TableCell>
            <TableCell>Attendance Status</TableCell>
            <TableCell>Work Hours</TableCell>
            <TableCell>Leave Type</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {daysInMonth.map((day, index) => (
            <TableRow
              key={index}
              style={{
                backgroundColor:
                  day.dayOfWeek === 0 || day.dayOfWeek === 6 ? '#f5f5f5' : 'inherit',
              }}
            >
              <TableCell>
                <Typography>{day.date} ({day.day})</Typography>
              </TableCell>
              <TableCell>
                <TextField
                  type="time"
                  value={dayjs(day.timeIn).format("HH:mm:ss")}
                  onChange={(e) => handleFieldChange(index, 'timeIn', e.target.value)}
                  size="small"
                />
              </TableCell>
              <TableCell>
                <TextField
                  type="time"
                  value={dayjs(day.timeOut).format("HH:mm:ss")}
                  onChange={(e) => handleFieldChange(index, 'timeOut', e.target.value)}
                  size="small"
                />
              </TableCell>

              <TableCell>
                  <Select
                      value={day.attendanceStatus}
                      onChange={(e) => handleFieldChange(index, "attendanceStatus", e.target.value)}
                      size="small"
                      displayEmpty
                  >
                      <MenuItem value="ab">ab</MenuItem>
                      <MenuItem value="0.5">0.5</MenuItem>
                      <MenuItem value="1">1</MenuItem>
                      <MenuItem value="No pay ab">No pay ab</MenuItem>
                  </Select>
                </TableCell>

              <TableCell>
                <TextField
                  value={day.workHours}
                />
              </TableCell>
              <TableCell>
                <Select
                  value={day.leaveType}
                  onChange={(e) => handleFieldChange(index, 'leaveType', e.target.value)}
                  displayEmpty
                  size="small"
                >
                  <MenuItem value="">
                    <em>None</em>
                  </MenuItem>
                  <MenuItem value="full day leave">Full Day Leave</MenuItem>
                  <MenuItem value="half day leave">Half Day Leave</MenuItem>
                  <MenuItem value="no pay leave">No Pay Leave</MenuItem>
                  <MenuItem value="holiday">Holiday</MenuItem>
                </Select>
              </TableCell>
              <TableCell>
                  {/* Only show the save button if the status has changed 
                  {day.attendanceStatus !== day.originalAttendanceStatus && (
                      <Button
                          variant="contained"
                          color="primary"
                          size="small"
                          onClick={() => handleSave(index)}
                      >
                          Save
                      </Button>
                  )}
                </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
}

export default AttendanceTable;

*/
/*
import React, { useState, useEffect } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  TextField,
  Select,
  MenuItem,
  Typography,
  Button,
} from '@mui/material';
import dayjs from 'dayjs';
import { fetchAttendance, updateAttendanceStatus } from '../../services/api'; // Ensure your api service has the updateAttendanceStatus method

function AttendanceTable(props) {
  const [daysInMonth, setDaysInMonth] = useState([]);

  const calculateWorkHours = (timeIn, timeOut) => {
    if (!timeIn || !timeOut) return ''; // Return empty if any time is missing

    const start = dayjs(timeIn, 'HH:mm');
    const end = dayjs(timeOut, 'HH:mm');
    const duration = end.diff(start, 'minute'); // Get the duration in minutes

    const hours = Math.floor(duration / 60); // Get the hours part
    const minutes = duration % 60; // Get the minutes part
    return `${hours}:${minutes}`; // Return formatted string
  };

  useEffect(() => {
    const currentMonth = dayjs(`01 ${props.selectedMonth} 2000`, "DD MMMM YYYY").month(); 
    const currentYear = props.selectedYear;
    const days = [];
    const daysInCurrentMonth = dayjs().daysInMonth();

    for (let i = 1; i <= daysInCurrentMonth; i++) {
      const date = dayjs(new Date(currentYear, currentMonth, i));
      const dayOfWeek = date.day();
      days.push({
        date: date.format('YYYY-MM-DD'),
        day: date.format('dddd'),
        dayOfWeek,
        timeIn: '',
        timeOut: '',
        attendanceStatus: 'ab',
        originalAttendanceStatus: 'ab', // Store the original status
        workHours: '',
        totalMinutes:'',
        leaveType: '',
      });
    }

    setDaysInMonth(days);

    const loadEmployeeAttendance = async () => {
      try {
        const employeeAttendanceList = await fetchAttendance(props.employeeId);
        
        const attendanceMap = {};
        employeeAttendanceList.forEach(record => {
            attendanceMap[record.date] = record;
        });

        const updatedDays = days.map(day => {
            const attendanceRecord = attendanceMap[day.date];
            if (attendanceRecord) {
                return {
                    ...day,
                    attendanceRecordId: attendanceRecord.attendanceRecordId,
                    timeIn: attendanceRecord.actualStartTime || '',
                    timeOut: attendanceRecord.actualEndTime || '',
                    attendanceStatus: attendanceRecord.attendance || '',
                    originalAttendanceStatus: attendanceRecord.attendance || '', 
                    workHours: calculateWorkHours(attendanceRecord.actualStartTime, attendanceRecord.actualEndTime),
                    leaveType: attendanceRecord.leaveType || '',
                };
            }
            return day;
        });
        setDaysInMonth(updatedDays);
      } catch (error) {
        console.error("Error fetching employee attendance:", error);
      }
    };

    loadEmployeeAttendance();
  }, [props.employeeId, props.selectedMonth, props.selectedYear]);

  const handleFieldChange = (index, field, value) => {
    const updatedDays = [...daysInMonth];
    updatedDays[index][field] = value;

    // If the attendance status is changed, set the new status
    if (field === 'attendanceStatus') {
        updatedDays[index].attendanceStatus = value;
    }

    if (field === 'timeIn' || field === 'timeOut') {
      const updatedWorkHours = calculateWorkHours(updatedDays[index].timeIn, updatedDays[index].timeOut);
      updatedDays[index].workHours = updatedWorkHours; // Update work hours when time is changed
    }

    setDaysInMonth(updatedDays);
  };

  const handleSave = async (index) => {
    const day = daysInMonth[index];
    if (day.attendanceStatus !== day.originalAttendanceStatus) {
      try {
        await updateAttendanceStatus(day.attendanceRecordId, day.attendanceStatus);
        // Update the original status after saving
        const updatedDays = [...daysInMonth];
        updatedDays[index].originalAttendanceStatus = day.attendanceStatus;
        setDaysInMonth(updatedDays);
        alert('Attendance status updated successfully');
      } catch (error) {
        console.error('Error updating attendance status:', error);
        alert('Failed to update attendance status');
      }
    }
  };

  return (
    <TableContainer component={Paper} style={{ margin: 'auto' }}>
      <Table>
        <TableHead>
          <TableRow>
            <TableCell>Date</TableCell>
            <TableCell>Time In</TableCell>
            <TableCell>Time Out</TableCell>
            <TableCell>Attendance Status</TableCell>
            <TableCell>Work Hours</TableCell>
            <TableCell>Total minutes</TableCell>
            <TableCell>Leave Type</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {daysInMonth.map((day, index) => (
            <TableRow
              key={index}
              style={{
                backgroundColor:
                  day.dayOfWeek === 0 || day.dayOfWeek === 6 ? '#f5f5f5' : 'inherit',
              }}
            >
              <TableCell>
                <Typography>{day.date} ({day.day})</Typography>
              </TableCell>
              <TableCell>
                <TextField
                  type="time"
                  value={dayjs(day.timeIn).format("HH:mm")}
                  onChange={(e) => handleFieldChange(index, 'timeIn', e.target.value)}
                  size="small"
                />
              </TableCell>
              <TableCell>
                <TextField
                  type="time"
                  value={dayjs(day.timeOut).format("HH:mm")}
                  onChange={(e) => handleFieldChange(index, 'timeOut', e.target.value)}
                  size="small"
                />
              </TableCell>
              <TableCell>
                <Select
                  value={day.attendanceStatus}
                  onChange={(e) => handleFieldChange(index, 'attendanceStatus', e.target.value)}
                  size="small"
                  displayEmpty
                >
                  <MenuItem value="ab">ab</MenuItem>
                  <MenuItem value="0.5">0.5</MenuItem>
                  <MenuItem value="1">1</MenuItem>
                  <MenuItem value="No pay ab">No pay ab</MenuItem>
                </Select>
              </TableCell>
              <TableCell>
                <TextField
                  value={day.workHours}
                />
              </TableCell>
              <TableCell>
                <TextField
                  value={day.totalMinutes}
                />
              </TableCell>
              <TableCell>
                <Select
                  value={day.leaveType}
                  onChange={(e) => handleFieldChange(index, 'leaveType', e.target.value)}
                  displayEmpty
                  size="small"
                >
                  <MenuItem value="">
                    <em>None</em>
                  </MenuItem>
                  <MenuItem value="full day leave">Full Day Leave</MenuItem>
                  <MenuItem value="half day leave">Half Day Leave</MenuItem>
                  <MenuItem value="no pay leave">No Pay Leave</MenuItem>
                  <MenuItem value="holiday">Holiday</MenuItem>
                </Select>
              </TableCell>
              <TableCell>
                {/* Only show the save button if the status has changed 
                {day.attendanceStatus !== day.originalAttendanceStatus && (
                  <Button
                    variant="contained"
                    color="primary"
                    size="small"
                    onClick={() => handleSave(index)}
                  >
                    Save
                  </Button>
                )}
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
}

export default AttendanceTable;

*/






/////////////////////////////////////
/*
import React, { useState, useEffect } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  TextField,
  Select,
  MenuItem,
  Typography,
  Button,
} from '@mui/material';
import dayjs from 'dayjs';
import { fetchAttendance, updateAttendanceStatus } from '../../services/api'; // Ensure your api service has the updateAttendanceStatus method
import OTHoursCell from './OTHoursCell';
import LateHoursCell from './LateHoursCell';

function AttendanceTable(props) {
  const [daysInMonth, setDaysInMonth] = useState([]);

  useEffect(() => {
    const currentMonth = dayjs(`01 ${props.selectedMonth} 2000`, "DD MMMM YYYY").month(); 
    const currentYear = props.selectedYear;
    const days = [];
    const daysInCurrentMonth = dayjs().daysInMonth();

    for (let i = 1; i <= daysInCurrentMonth; i++) {
      const date = dayjs(new Date(currentYear, currentMonth, i));
      const dayOfWeek = date.day();
      days.push({
        date: date.format('YYYY-MM-DD'),
        day: date.format('dddd'),
        dayOfWeek,
        timeIn: '',
        timeOut: '',
        attendanceStatus: 'ab',
        originalAttendanceStatus: 'ab', // Store the original status
        workHours: '',
        shift: '',
        otHours: 0,
        originalOtHours: 0,
        lateHours: 0,
        originalLateHours: 0,
        leaveType: '',
      });
    }

    setDaysInMonth(days);

    const loadEmployeeAttendance = async () => {
      try {
        const employeeAttendanceList = await fetchAttendance(props.employeeId);
        
        const attendanceMap = {};
        employeeAttendanceList.forEach(record => {
            attendanceMap[record.date] = record;
        });
        console.log(attendanceMap)
        const updatedDays = days.map(day => {
            const attendanceRecord = attendanceMap[day.date];
            if (attendanceRecord) {
                return {
                    ...day,
                    attendanceRecordId:attendanceRecord.attendanceRecordId,
                    timeIn: attendanceRecord.actualStartTime || '',
                    timeOut: attendanceRecord.actualEndTime || '',
                    attendanceStatus: attendanceRecord.attendance || '',
                    originalAttendanceStatus: attendanceRecord.attendance || '', 
                    workHours: attendanceRecord.workHours || '',
                    shift: attendanceRecord.shift || 'M',
                    otHours: attendanceRecord.otHours || '',
                    originalOtHours: attendanceRecord.otHours || '', 
                    lateHours: attendanceRecord.lateHours || '',
                    originalLateHours: attendanceRecord.lateHours || '', 
                    leaveType: attendanceRecord.leaveType || '',
                };
            }
            return day;
        });
        setDaysInMonth(updatedDays);
      } catch (error) {
        console.error("Error fetching employee attendance:", error);
      }
    };

    loadEmployeeAttendance();
  }, [props.employeeId, props.selectedMonth, props.selectedYear]);

  const handleFieldChange = (index, field, value) => {
    const updatedDays = [...daysInMonth];
    updatedDays[index][field] = value;

    // If the attendance status is changed, set the new status
    if (field === 'attendanceStatus') {
        updatedDays[index].attendanceStatus = value;
    }

    setDaysInMonth(updatedDays);
};

/* WORKING HANDLE SAVE FUNCTION
  const handleSave = async (index) => {
    const day = daysInMonth[index];
    if (day.attendanceStatus !== day.originalAttendanceStatus) {
        try {
            await updateAttendanceStatus(props.employeeId,day.date, day.attendanceStatus);
            // Update the original status after saving
            const updatedDays = [...daysInMonth];
            updatedDays[index].originalAttendanceStatus = day.attendanceStatus;
            setDaysInMonth(updatedDays);
            alert('Attendance status updated successfully');
        } catch (error) {
            console.error('Error updating attendance status:', error);
            alert('Failed to update attendance status');
        }
    }
};
*/

/*
const handleSave = async (index) => {
  const day = daysInMonth[index];
  if (day.attendanceStatus !== day.originalAttendanceStatus) {
      try {
          await updateAttendanceStatus(day.attendanceRecordId, day.attendanceStatus);
          // Update the original status after saving
          const updatedDays = [...daysInMonth];
          updatedDays[index].originalAttendanceStatus = day.attendanceStatus;
          setDaysInMonth(updatedDays);
          alert('Attendance status updated successfully');
      } catch (error) {
          console.error('Error updating attendance status:', error);
          alert('Failed to update attendance status');
      }
  }
};



  return (
    <TableContainer component={Paper} style={{ margin: 'auto' }}>
      <Table>
        <TableHead>
          <TableRow>
            <TableCell>Date</TableCell>
            <TableCell>Time In</TableCell>
            <TableCell>Time Out</TableCell>
            <TableCell>Work Hours</TableCell>
            <TableCell>Shift</TableCell>
            <TableCell>OT Hours</TableCell>
            <TableCell>Late Hours</TableCell>
            <TableCell>Attendance Status</TableCell>
            {/* <TableCell>Leave Type</TableCell> 
          </TableRow>
        </TableHead>
        <TableBody>
          {daysInMonth.map((day, index) => (
            <TableRow
              key={index}
              style={{
                backgroundColor:
                  day.dayOfWeek === 0 || day.dayOfWeek === 6 ? '#f5f5f5' : 'inherit',
              }}
            >
              <TableCell>
                <Typography>{day.date} ({day.day})</Typography>
              </TableCell>
              <TableCell>
                <TextField
                  type="time"
                  value={dayjs(day.timeIn).format("HH:mm:ss")}
                  onChange={(e) => handleFieldChange(index, 'timeIn', e.target.value)}
                  size="small"
                />
              </TableCell>
              <TableCell>
                <TextField
                  type="time"
                  value={dayjs(day.timeOut).format("HH:mm:ss")}
                  onChange={(e) => handleFieldChange(index, 'timeOut', e.target.value)}
                  size="small"
                />
              </TableCell>
              <TableCell>
                <TextField
                  value={day.workHours}
                  size="small"
                />
              </TableCell>
              <TableCell>
                  <Select
                      value={day.shift}
                      onChange={(e) => handleFieldChange(index, "shift", e.target.value)}
                      size="small"
                      displayEmpty
                  >
                      <MenuItem value="M">M</MenuItem>
                      <MenuItem value="E">E</MenuItem>
                  </Select>
                </TableCell>
              <OTHoursCell 
              day={day} 
              index={index} 
              handleFieldChange={handleFieldChange} />

              <LateHoursCell 
              day={day} 
              index={index} 
              handleFieldChange={handleFieldChange} />


              <TableCell>
                  <Select
                      value={day.attendanceStatus}
                      onChange={(e) => handleFieldChange(index, "attendanceStatus", e.target.value)}
                      size="small"
                      displayEmpty
                  >
                      <MenuItem value="ab">ab</MenuItem>
                      <MenuItem value="ab-nopay">ab-nopay</MenuItem>
                      <MenuItem value="0.5">0.5</MenuItem>
                      <MenuItem value="1">1</MenuItem>
                  </Select>
                </TableCell>
              {/* <TableCell>
                <Select
                  value={day.leaveType}
                  onChange={(e) => handleFieldChange(index, 'leaveType', e.target.value)}
                  displayEmpty
                  size="small"
                >
                  <MenuItem value="">
                    <em>None</em>
                  </MenuItem>
                  <MenuItem value="full day leave">Full Day Leave</MenuItem>
                  <MenuItem value="half day leave">Half Day Leave</MenuItem>
                  <MenuItem value="no pay leave">No Pay Leave</MenuItem>
                  <MenuItem value="holiday">Holiday</MenuItem>
                </Select>
              </TableCell> 
              <TableCell>
                  {/* Only show the save button if the status has changed 
                  {(day.attendanceStatus !== day.originalAttendanceStatus 
                  || day.otHours !== day.originalOtHours 
                  || day.lateHours !== day.originalLateHours )
                  && (
                      <Button
                          variant="contained"
                          color="primary"
                          size="small"
                          onClick={() => handleSave(index)}
                      >
                          Save
                      </Button>
                  )}
                </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
}

export default AttendanceTable;

*/
/*

import React, { useEffect, useState } from 'react';
import './Shift.css';
import { patch } from '@mui/material';

const Shift = () => {
  const [shifts, setShifts] = useState([]);  // Initialize as an empty array
  const [loading, setLoading] = useState(true);  // To handle loading state
  const [error, setError] = useState(null);  // To handle any errors
  const [modifiedShifts, setModifiedShifts] = useState({});  // Track modified shifts

  // Fetch shift data from the backend API
  useEffect(() => {
    const fetchShiftData = async () => {
      try {
        const response = await fetch('/api/shifts');
        if (!response.ok) {
          throw new Error('Failed to fetch shifts');
        }
        const data = await response.json();

        // Ensure `data` is an array before setting it to `shifts`
        setShifts(Array.isArray(data) ? data : []);
      } catch (error) {
        console.error('Error fetching shift data:', error);
        setError(error.message);  // Set the error message
      } finally {
        setLoading(false);  // Set loading to false once data is fetched
      }
    };

    fetchShiftData();
  }, []);

  const handleTimeChange = (index, field, value) => {
    const updatedShifts = [...shifts];
    updatedShifts[index][field] = value;
    setShifts(updatedShifts);

    // Mark the shift as modified
    setModifiedShifts((prevModified) => ({
      ...prevModified,
      [index]: true,
    }));
  };

  const handleSave = (index) => {
    const shiftToSave = shifts[index];

    console.log('Saving shift:', shiftToSave);

    // After saving, reset the modified flag for the shift
    setModifiedShifts((prevModified) => ({
      ...prevModified,
      [index]: false,
    }));

    // Here you could optionally update the UI after the save. In this case, we already updated the state
    // when the time was changed, so the table will reflect the new times.
  };

  return (
    <div>
      <header>
        <h2 style={{ marginBottom: '20px' }}>Shift Details</h2>
      </header>

      {loading && <p>Loading...</p>}  {/* Show loading message if data is being fetched *

      {error && <p style={{ color: 'red' }}>{error}</p>}  {/* Show error message if there is an error *

      {!loading && !error && (
        <table border="1" style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead>
            <tr>
              <th>Shift Type</th>
              <th>Start Time</th>
              <th>End Time</th>
              <th>Actions</th>  {/* Column for the Save button *
            </tr>
          </thead>
          <tbody>
            {shifts.map((shift, index) => (
              <tr key={index}>
                <td>{shift.shiftType}</td> {/* Shift ID will be shown as Shift Type *
                <td>
                  <input
                    type="time"
                    value={shift.startTime}
                    onChange={(e) => handleTimeChange(index, 'startTime', e.target.value)}
                  />
                </td>
                <td>
                  <input
                    type="time"
                    value={shift.endTime}
                    onChange={(e) => handleTimeChange(index, 'endTime', e.target.value)}
                  />
                </td>
                <td>
                  {/* Display Save button only if the shift has been modified 
                  {modifiedShifts[index] && (
                    <button className="save-button" onClick={() => handleSave(index)}>
                      Save
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default Shift;
*/

/*
import React, { useEffect, useState } from 'react';
import './Shift.css';
//import { patch } from '@mui/material';
import { updateShift } from '../../services/api'; // Adjust the path if `api.js` is located elsewhere


const Shift = () => {
  const [shifts, setShifts] = useState([]);  // Initialize as an empty array
  const [loading, setLoading] = useState(true);  // To handle loading state
  const [error, setError] = useState(null);  // To handle any errors
  const [modifiedShifts, setModifiedShifts] = useState({});  // Track modified shifts

  // Fetch shift data from the backend API
  useEffect(() => {
    const fetchShiftData = async () => {
      try {
        const response = await fetch('/api/shifts');
        if (!response.ok) {
          throw new Error('Failed to fetch shifts');
        }
        const data = await response.json();

        // Ensure `data` is an array before setting it to `shifts`
        setShifts(Array.isArray(data) ? data : []);
      } catch (error) {
        console.error('Error fetching shift data:', error);
        setError(error.message);  // Set the error message
      } finally {
        setLoading(false);  // Set loading to false once data is fetched
      }
    };

    fetchShiftData();
  }, []);

  const handleTimeChange = (index, field, value) => {
    const updatedShifts = [...shifts];
    updatedShifts[index][field] = value;
    setShifts(updatedShifts);

    // Mark the shift as modified
    setModifiedShifts((prevModified) => ({
      ...prevModified,
      [index]: true,
    }));
  };

  /*
  const handleSave = (index) => {
    const shiftToSave = shifts[index];

    console.log('Saving shift:', shiftToSave);

    // After saving, reset the modified flag for the shift
    setModifiedShifts((prevModified) => ({
      ...prevModified,
      [index]: false,
    }));

    // Here you could optionally update the UI after the save. In this case, we already updated the state
    // when the time was changed, so the table will reflect the new times.
  };
  */
 /*
  const handleSave = async (index) => {
    const shiftToSave = shifts[index];
  
    console.log('Saving shift:', shiftToSave);  // Log the shift to verify its structure
  
    // Check if the shift has a valid ID
    if (!shiftToSave || !shiftToSave.id) {
      console.error('Shift does not have a valid ID');
      return;  // Prevent the save operation if there's no valid ID
    }
  
    try {
      const response = await fetch(`/api/shifts/${shiftToSave.id}`, {
        method: 'PATCH',  // Use PATCH method to update a specific shift
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(shiftToSave),  // Sending the updated shift details as JSON
      });
  
      if (!response.ok) {
        throw new Error('Failed to save shift');
      }
  
      // After saving, reset the modified flag for the shift
      setModifiedShifts((prevModified) => ({
        ...prevModified,
        [index]: false,
      }));
  
      console.log('Shift saved successfully!');
    } catch (error) {
      console.error('Error saving shift:', error);
      // Optionally, display an error message to the user
    }
  };
  */

/*
  const handleSave = async (index) => {
    const shiftToSave = shifts[index];
  
    const id = shiftToSave.shiftId; // Assign shiftId as id
    const shiftData = {
      shiftType: shiftToSave.shiftType,
      startTime: shiftToSave.startTime,
      endTime: shiftToSave.endTime,
      department: shiftToSave.department,
    };
    // Show confirmation message
    const confirmed = window.confirm("Are you sure you want to save the changes?");
    if (!confirmed) return; // Cancel the save operation if the user clicks "Cancel"

  
    try {
      const response = await updateShift(id, shiftData);
      console.log('Shift saved successfully:', response);
    } catch (error) {
      console.error('Error saving shift:', error);
    }
  };
  
  
  return (
    <div>
      <header>
        <h2 style={{ marginBottom: '20px' }}>Shift Details</h2>
      </header>

      {loading && <p>Loading...</p>}  {/* Show loading message if data is being fetched 

      {error && <p style={{ color: 'red' }}>{error}</p>}  {/* Show error message if there is an error 

      {!loading && !error && (
        <table border="1" style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead>
            <tr>
              <th>Department</th>  
              <th>Shift Type</th>
              <th>Start Time</th>
              <th>End Time</th>
              <th></th>  {/* Column for the Save button 
            </tr>
          </thead>
          <tbody>
            {shifts.map((shift, index) => (
              <tr key={index}>
                <td></td>
                <td>{shift.shiftType}</td> {/* Shift ID will be shown as Shift Type 
                <td>
                  <input
                    type="time"
                    value={shift.startTime}
                    onChange={(e) => handleTimeChange(index, 'startTime', e.target.value)}
                  />
                </td>
                <td>
                  <input
                    type="time"
                    value={shift.endTime}
                    onChange={(e) => handleTimeChange(index, 'endTime', e.target.value)}
                  />
                </td>
                <td>
                  {/* Display Save button only if the shift has been modified 
                  {modifiedShifts[index] && (
                    <button className="save-button" onClick={() => handleSave(index)}>
                      Save
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default Shift;
*/

/*
import React, { useEffect, useState } from 'react';
import './Shift.css';
import { updateShift } from '../../services/api'; // Adjust the path if `api.js` is located elsewhere

const Shift = () => {
  const [shifts, setShifts] = useState([]);  // Initialize as an empty array
  const [loading, setLoading] = useState(true);  // To handle loading state
  const [error, setError] = useState(null);  // To handle any errors
  const [modifiedShifts, setModifiedShifts] = useState({});  // Track modified shifts

  // Fetch shift data from the backend API
  useEffect(() => {
    const fetchShiftData = async () => {
      try {
        const response = await fetch('/api/shifts');
        if (!response.ok) {
          throw new Error('Failed to fetch shifts');
        }
        const data = await response.json();

        // Ensure `data` is an array before setting it to `shifts`
        setShifts(Array.isArray(data) ? data : []);
      } catch (error) {
        console.error('Error fetching shift data:', error);
        setError(error.message);  // Set the error message
      } finally {
        setLoading(false);  // Set loading to false once data is fetched
      }
    };

    fetchShiftData();
  }, []);

  const handleTimeChange = (index, field, value) => {
    const updatedShifts = [...shifts];
    updatedShifts[index][field] = value;
    setShifts(updatedShifts);

    // Mark the shift as modified
    setModifiedShifts((prevModified) => ({
      ...prevModified,
      [index]: true,
    }));
  };

  const handleSave = async (index) => {
    const shiftToSave = shifts[index];
  
    const id = shiftToSave.shiftId; // Assign shiftId as id
    const shiftData = {
      shiftType: shiftToSave.shiftType,
      startTime: shiftToSave.startTime,
      endTime: shiftToSave.endTime,
      department: shiftToSave.department,
    };
    // Show confirmation message
    const confirmed = window.confirm("Are you sure you want to save the changes?");
    if (!confirmed) return; // Cancel the save operation if the user clicks "Cancel"

    try {
      const response = await updateShift(id, shiftData);
      console.log('Shift saved successfully:', response);
    } catch (error) {
      console.error('Error saving shift:', error);
    }
  };

  return (
    <div>
      <header>
        <h2 style={{ marginBottom: '20px' }}>Shift Details</h2>
      </header>

    
      {error && <p style={{ color: 'red' }}>{error}</p>}  

      {!loading && !error && (
        <table border="1" style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead>
            <tr>
              <th>Department</th>  
              <th>Shift Type</th>
              <th>Start Time</th>
              <th>End Time</th>
              <th></th>  
            </tr>
          </thead>
          <tbody>
            {shifts.map((shift, index) => (
              <tr key={index}>
                <td>{shift.department ? shift.department.name : 'N/A'}</td> 
                <td>{shift.shiftType}</td>
                <td>
                  <input
                    type="time"
                    value={shift.startTime}
                    onChange={(e) => handleTimeChange(index, 'startTime', e.target.value)}
                  />
                </td>
                <td>
                  <input
                    type="time"
                    value={shift.endTime}
                    onChange={(e) => handleTimeChange(index, 'endTime', e.target.value)}
                  />
                </td>
                <td>
                  
                  {modifiedShifts[index] && (
                    <button className="save-button" onClick={() => handleSave(index)}>
                      Save
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default Shift;
*/



/*
import React, { useEffect, useState } from 'react';
import './Shift.css';
import { updateShift } from '../../services/api'; // Adjust the path if `api.js` is located elsewhere

const Shift = () => {
  const [shifts, setShifts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [modifiedShifts, setModifiedShifts] = useState({});

  // Fetch shift data from the backend API
  useEffect(() => {
    const fetchShiftData = async () => {
      try {
        const response = await fetch('/api/shifts');
        if (!response.ok) {
          throw new Error('Failed to fetch shifts');
        }
        const data = await response.json();

        // Ensure `data` is an array before setting it to `shifts`
        setShifts(Array.isArray(data) ? data : []);
      } catch (error) {
        console.error('Error fetching shift data:', error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchShiftData();
  }, []);

  const handleTimeChange = (index, field, value) => {
    const updatedShifts = [...shifts];
    updatedShifts[index][field] = value;
    setShifts(updatedShifts);

    // Mark the shift as modified
    setModifiedShifts((prevModified) => ({
      ...prevModified,
      [index]: true,
    }));
  };

  // Function to calculate duration between startTime and endTime
  const calculateDuration = (startTime, endTime) => {
    const start = new Date(`1970-01-01T${startTime}:00`);
    const end = new Date(`1970-01-01T${endTime}:00`);

    // Handle case where end time is after midnight (e.g., 10:00 to 02:00)
    if (end < start) {
      end.setDate(end.getDate() + 1);
    }

    const diff = (end - start) / (1000 * 60); // Difference in minutes
    const hours = Math.floor(diff / 60);
    const minutes = diff % 60;
    return `${hours}:${minutes}`;
  };

  const handleSave = async (index) => {
    const shiftToSave = shifts[index];
    const id = shiftToSave.shiftId;
    const shiftData = {
      shiftType: shiftToSave.shiftType,
      startTime: shiftToSave.startTime,
      endTime: shiftToSave.endTime,
      department: shiftToSave.department,
    };

    const confirmed = window.confirm("Are you sure you want to save the changes?");
    if (!confirmed) return;

    try {
      const response = await updateShift(id, shiftData);
      console.log('Shift saved successfully:', response);
    } catch (error) {
      console.error('Error saving shift:', error);
    }
  };

  return (
    <div>
      <header>
        <h2 style={{ marginBottom: '20px' }}>Shift Details</h2>
      </header>

      {loading && <p>Loading...</p>}
      {error && <p style={{ color: 'red' }}>{error}</p>}

      {!loading && !error && (
        <table border="1" style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead>
            <tr>
              <th>Department</th>
              <th>Shift Type</th>
              <th>Start Time</th>
              <th>End Time</th>
              <th>Shift Duration</th> 
              <th></th> 
            </tr>
          </thead>
          <tbody>
            {shifts.map((shift, index) => (
              <tr key={index}>
                <td>{shift.department ? shift.department.name : 'N/A'}</td>
                <td>{shift.shiftType}</td>
                <td>
                  <input
                    type="time"
                    value={shift.startTime}
                    onChange={(e) => handleTimeChange(index, 'startTime', e.target.value)}
                  />
                </td>
                <td>
                  <input
                    type="time"
                    value={shift.endTime}
                    onChange={(e) => handleTimeChange(index, 'endTime', e.target.value)}
                  />
                </td>
                <td>{calculateDuration(shift.startTime, shift.endTime)}</td> 
                <td>
                  
                  {modifiedShifts[index] && (
                    <button className="save-button" onClick={() => handleSave(index)}>
                      Save
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default Shift;

*/

/*
import { Link } from 'react-router-dom';
import AttendanceTable from './AttendanceTable';
import React, { useState, useEffect } from 'react';
import {
  Box,
  Select,
  MenuItem,
  Typography,
  FormControl,
  InputLabel,
} from '@mui/material';
import { fetchEmployees } from '../../services/api';



function Attendance({ selectedMonth, selectedYear }) {
    const [employees, setEmployees] = useState([]);
    const [selectedEmployee, setSelectedEmployee] = useState(null);
  
    // Fetch employees when component mounts
    useEffect(() => {
      const loadEmployees = async () => {
        try {
          const employeeList = await fetchEmployees();
          setEmployees(employeeList);
        } catch (error) {
          console.error("Error fetching employees:", error);
        }
      };
      loadEmployees();
    }, []);
  
    // Handle employee selection
    const handleEmployeeChange = (event) => {
      const employeeId = event.target.value;
      const employee = employees.find((emp) => emp.employeeId === employeeId);
      setSelectedEmployee(employee);
    };
  
    return (
      <Box display="flex" flexDirection="column" alignItems="center" p={3}>
        <div className="buttons">
            <Link to="/upload-attendance-excel">
                <button>Upload Employee Attendance</button>
            </Link>
        </div>
        <FormControl fullWidth variant="outlined" margin="normal">
          <InputLabel>Select Employee</InputLabel>
          <Select
            label="Select Employee"
            value={selectedEmployee ? selectedEmployee.employeeId : ""}
            onChange={handleEmployeeChange}
          >
            {employees.map((employee) => (
              <MenuItem key={employee.employeeId} value={employee.employeeId}>
                {employee.shortName}
              </MenuItem>
            ))}
          </Select>
        </FormControl>
  
        {/* Show the Attendance Table only if an employee is selected 
        {selectedEmployee && (
          <>
            <Typography variant="h6" align="center" gutterBottom fontWeight={"bold"}>
              {`Attendance for ${selectedMonth} ${selectedYear}`}
            </Typography>
            <br/>
            <Typography 
                    variant="h8" 
                    align="left" 
                    gutterBottom 
                    style={{ width: '100%', display: 'flex', justifyContent: 'space-between' }}
                  >
                    <span>{`Employee Name: ${selectedEmployee.shortName}`}</span>
                    <span>{`Designated Time In: `}</span>
                    <span>{`Designated Time Out:`}</span>
                    <span>{`Designated Working hours:`}</span>
            </Typography>
           <br/>

            <AttendanceTable employeeId={selectedEmployee.employeeId} selectedMonth={selectedMonth} selectedYear={selectedYear} />
          </>
        )}
      </Box>
    );
};
export default Attendance;

*/


/*
import React, { useEffect, useState } from 'react';
import './Shift.css';
import { updateShift } from '../../services/api'; // Adjust the path if `api.js` is located elsewhere

const Shift = () => {
  const [shifts, setShifts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [modifiedShifts, setModifiedShifts] = useState({});

  // Utility function to format enum values (capitalize first letter, lowercase the rest)
  const formatEnum = (value) => {
    if (!value) return '';
    return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();
  };

  // Fetch shift data from the backend API
  useEffect(() => {
    const fetchShiftData = async () => {
      try {
        const response = await fetch('/api/shifts');
        if (!response.ok) {
          throw new Error('Failed to fetch shifts');
        }
        const data = await response.json();

        // Ensure `data` is an array before setting it to `shifts`
        setShifts(Array.isArray(data) ? data : []);
      } catch (error) {
        console.error('Error fetching shift data:', error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchShiftData();
  }, []);

  const handleTimeChange = (index, field, value) => {
    const updatedShifts = [...shifts];
    updatedShifts[index][field] = value;
    setShifts(updatedShifts);

    // Mark the shift as modified
    setModifiedShifts((prevModified) => ({
      ...prevModified,
      [index]: true,
    }));
  };
/*
  // Function to calculate duration between startTime and endTime
  const calculateDuration = (startTime, endTime) => {
    const start = new Date(`1970-01-01T${startTime}:00`);
    const end = new Date(`1970-01-01T${endTime}:00`);

    // Handle case where end time is after midnight (e.g., 10:00 to 02:00)
    if (end < start) {
      end.setDate(end.getDate() + 1);
    }

    const diff = (end - start) / (1000 * 60); // Difference in minutes
    const hours = Math.floor(diff / 60);
    const minutes = diff % 60;
    return `${hours}:${minutes.toString().padStart(2, '0')}`;
  };




  const handleSave = async (index) => {
    const shiftToSave = shifts[index];
    const id = shiftToSave.shiftId;
    const shiftData = {
      shiftType: shiftToSave.shiftType,
      startTime: shiftToSave.startTime,
      endTime: shiftToSave.endTime,
      department: shiftToSave.department,
    };

    const confirmed = window.confirm("Are you sure you want to save the changes?");
    if (!confirmed) return;

    try {
      const response = await updateShift(id, shiftData);
      console.log('Shift saved successfully:', response);
    } catch (error) {
      console.error('Error saving shift:', error);
    }
  };

  return (
    <div>
      <header>
        <h2 style={{ marginBottom: '20px' }}>Shift Details</h2>
      </header>

      {loading && <p>Loading...</p>}
      {error && <p style={{ color: 'red' }}>{error}</p>}

      {!loading && !error && (
        <table border="1" style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead>
            <tr>
              <th>Department</th>
              <th>Shift Type</th>
              <th>Shift Period</th> {/* Moved Shift Period column here 
              <th>Start Time</th>
              <th>End Time</th>
              <th>Shift Duration</th>
              <th></th> {/* Column for the Save button 
            </tr>
          </thead>
          <tbody>
            {shifts.map((shift, index) => (
              <tr key={index}>
                <td>{shift.department ? shift.department.name : 'N/A'}</td>
                <td>{shift.shiftType}</td>
                <td>{formatEnum(shift.shiftPeriod)}</td> {/* Display formatted Shift Period 
                <td>
                  <input
                    type="time"
                    value={shift.startTime}
                    onChange={(e) => handleTimeChange(index, 'startTime', e.target.value)}
                  />
                </td>
                <td>
                  <input
                    type="time"
                    value={shift.endTime}
                    onChange={(e) => handleTimeChange(index, 'endTime', e.target.value)}
                  />
                </td>
                <td>{calculateDuration(shift.startTime, shift.endTime)}</td>
                <td>
                  {/* Display Save button only if the shift has been modified 
                  {modifiedShifts[index] && (
                    <button className="save-button" onClick={() => handleSave(index)}>
                      Save
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default Shift;
*/




