{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\weerasi-ps19259\\\\IdeaProjects\\\\payroll-system\\\\frontend\\\\src\\\\components\\\\Attendance\\\\AttendanceTable.js\",\n  _s = $RefreshSig$();\n/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  Typography,\r\n} from '@mui/material';\r\nimport dayjs from 'dayjs';\r\nimport { fetchAttendance } from '../../services/api';\r\n\r\n\r\nfunction AttendanceTable(props) {\r\n    const [daysInMonth, setDaysInMonth] = useState([]);\r\n  \r\n    // Get all days of the current month\r\n    useEffect(() => {\r\n      const currentMonth = dayjs(`01 ${props.selectedMonth} 2000`, \"DD MMMM YYYY\").month(); \r\n      const currentYear = props.selectedYear; // get the current year\r\n      const days = [];\r\n      const daysInCurrentMonth = dayjs().daysInMonth(); // number of days in the current month\r\n  \r\n      // Create an array of days for the current month\r\n      for (let i = 1; i <= daysInCurrentMonth; i++) {\r\n        const date = dayjs(new Date(currentYear, currentMonth, i));\r\n        const dayOfWeek = date.day(); // day of the week (0 = Sunday, 6 = Saturday)\r\n        days.push({\r\n          date: date.format('YYYY-MM-DD'),\r\n          day: date.format('dddd'),\r\n          dayOfWeek,\r\n          timeIn: '',\r\n          timeOut: '',\r\n          attendanceStatus: 'ab',\r\n          workHours: '',\r\n          leaveType: '',\r\n        });\r\n      }\r\n  \r\n      setDaysInMonth(days); // Set the days in the current month\r\n  \r\n      // Load employee attendance after setting up the days\r\n      const loadEmployeeAttendance = async () => {\r\n        try {\r\n          const employeeAttendanceList = await fetchAttendance(props.employeeId);\r\n          \r\n          // Create a lookup map for quick access by date\r\n          const attendanceMap = {};\r\n          employeeAttendanceList.forEach(record => {\r\n              attendanceMap[record.date] = record;\r\n          });\r\n          // Update daysInMonth using the attendance map\r\n          const updatedDays = days.map(day => {\r\n              const attendanceRecord = attendanceMap[day.date];\r\n              if (attendanceRecord) {\r\n                  return {\r\n                      ...day,\r\n                      timeIn: attendanceRecord.actualStartTime || '',\r\n                      timeOut: attendanceRecord.actualEndTime || '',\r\n                      attendanceStatus: attendanceRecord.attendance || '',\r\n                      workHours: attendanceRecord.workHours || '',\r\n                      leaveType: attendanceRecord.leaveType || '',\r\n                  };\r\n              }\r\n              return day;\r\n          });\r\n\r\n          setDaysInMonth(updatedDays); // Update the state with the fetched data\r\n        } catch (error) {\r\n          console.error(\"Error fetching employee attendance:\", error);\r\n        }\r\n      };\r\n  \r\n      loadEmployeeAttendance();\r\n    }, [props.employeeId,props.selectedMonth,props.selectedYear]);\r\n  \r\n    // Handle change for attendance fields\r\n    const handleFieldChange = (index, field, value) => {\r\n      const updatedDays = [...daysInMonth];\r\n      updatedDays[index][field] = value;\r\n      setDaysInMonth(updatedDays);\r\n    };\r\n\r\n  return (\r\n    <TableContainer component={Paper} style={{margin: 'auto' }}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Date</TableCell>\r\n            <TableCell>Time In</TableCell>\r\n            <TableCell>Time Out</TableCell>\r\n            <TableCell>Attendance Status</TableCell>\r\n            <TableCell>Work Hours</TableCell>\r\n            <TableCell>Leave Type</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {daysInMonth.map((day, index) => (\r\n            <TableRow\r\n              key={index}\r\n              style={{\r\n                backgroundColor:\r\n                  day.dayOfWeek === 0 || day.dayOfWeek === 6 ? '#f5f5f5' : 'inherit', // Different color for weekends\r\n              }}\r\n            >\r\n              <TableCell>\r\n                <Typography>{day.date} ({day.day})</Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <TextField\r\n                  type=\"time\"\r\n                  value={dayjs(day.timeIn).format(\"HH:mm:ss\")}\r\n                  onChange={(e) => handleFieldChange(index, 'timeIn', e.target.value)}\r\n                  size=\"small\"\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <TextField\r\n                  type=\"time\"\r\n                  value={dayjs(day.timeOut).format(\"HH:mm:ss\")}\r\n                  onChange={(e) => handleFieldChange(index, 'timeOut', e.target.value)}\r\n                  size=\"small\"\r\n                />\r\n              </TableCell>\r\n\r\n\r\n\r\n              <TableCell>\r\n                <Select\r\n                    value={day.attendanceStatus}\r\n                    onChange={(e) => handleFieldChange(index, \"attendanceStatus\", e.target.value)}\r\n                    size=\"small\"\r\n                    displayEmpty\r\n                  >\r\n                    <MenuItem value=\"ab\">ab</MenuItem>\r\n                    <MenuItem value=\"0.5\">0.5</MenuItem>\r\n                    <MenuItem value=\"1\">1</MenuItem>\r\n                  </Select>\r\n                </TableCell>\r\n\r\n\r\n              <TableCell>\r\n                <TextField\r\n                  // type=\"number\"\r\n                  value={day.workHours}\r\n                  // onChange={(e) => handleFieldChange(index, 'workHours', e.target.value)}\r\n                  // size=\"small\"\r\n                  // inputProps={{ min: 0, step: 0.5 }}\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <Select\r\n                  value={day.leaveType}\r\n                  onChange={(e) => handleFieldChange(index, 'leaveType', e.target.value)}\r\n                  displayEmpty\r\n                  size=\"small\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  <MenuItem value=\"full day leave\">Full Day Leave</MenuItem>\r\n                  <MenuItem value=\"half day leave\">Half Day Leave</MenuItem>\r\n                  <MenuItem value=\"no pay leave\">No Pay Leave</MenuItem>\r\n                  <MenuItem value=\"holiday\">Holiday</MenuItem>\r\n                </Select>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nexport default AttendanceTable;\r\n\r\n*/\n\nimport React, { useState, useEffect } from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, TextField, Select, MenuItem, Typography, Button } from '@mui/material';\nimport dayjs from 'dayjs';\nimport { fetchAttendance, saveUpdatedStatus } from '../../services/api'; // Make sure saveUpdatedStatus is defined in your API service.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AttendanceTable(props) {\n  _s();\n  const [daysInMonth, setDaysInMonth] = useState([]);\n  const [modifiedIndices, setModifiedIndices] = useState(new Set());\n\n  // Get all days of the current month\n  useEffect(() => {\n    const currentMonth = dayjs(`01 ${props.selectedMonth} 2000`, \"DD MMMM YYYY\").month();\n    const currentYear = props.selectedYear;\n    const days = [];\n    const daysInCurrentMonth = dayjs().daysInMonth();\n\n    // Create an array of days for the current month\n    for (let i = 1; i <= daysInCurrentMonth; i++) {\n      const date = dayjs(new Date(currentYear, currentMonth, i));\n      const dayOfWeek = date.day();\n      days.push({\n        date: date.format('YYYY-MM-DD'),\n        day: date.format('dddd'),\n        dayOfWeek,\n        timeIn: '',\n        timeOut: '',\n        attendanceStatus: 'ab',\n        workHours: '',\n        leaveType: '',\n        updateAttendanceStatus: null\n      });\n    }\n    setDaysInMonth(days);\n\n    // Load employee attendance\n    const loadEmployeeAttendance = async () => {\n      try {\n        const employeeAttendanceList = await fetchAttendance(props.employeeId);\n        const attendanceMap = {};\n        employeeAttendanceList.forEach(record => {\n          attendanceMap[record.date] = record;\n        });\n        const updatedDays = days.map(day => {\n          const attendanceRecord = attendanceMap[day.date];\n          if (attendanceRecord) {\n            return {\n              ...day,\n              timeIn: attendanceRecord.actualStartTime || '',\n              timeOut: attendanceRecord.actualEndTime || '',\n              attendanceStatus: attendanceRecord.attendance || '',\n              workHours: attendanceRecord.workHours || '',\n              leaveType: attendanceRecord.leaveType || '',\n              updateAttendanceStatus: attendanceRecord.updateAttendanceStatus || null\n            };\n          }\n          return day;\n        });\n        setDaysInMonth(updatedDays);\n      } catch (error) {\n        console.error(\"Error fetching employee attendance:\", error);\n      }\n    };\n    loadEmployeeAttendance();\n  }, [props.employeeId, props.selectedMonth, props.selectedYear]);\n\n  // Handle change for attendance fields\n  const handleFieldChange = (index, field, value) => {\n    const updatedDays = [...daysInMonth];\n    updatedDays[index][field] = value;\n    setDaysInMonth(updatedDays);\n\n    // Mark the row as modified if attendanceStatus is changed\n    if (field === 'attendanceStatus' && value !== daysInMonth[index].attendanceStatus) {\n      setModifiedIndices(new Set(modifiedIndices).add(index));\n    }\n  };\n\n  // Handle saving the updated attendance status\n  const handleSaveUpdate = async index => {\n    const updatedStatus = daysInMonth[index].attendanceStatus;\n    try {\n      await saveUpdatedStatus(props.employeeId, daysInMonth[index].date, updatedStatus);\n      setModifiedIndices(prev => {\n        const newModifiedIndices = new Set(prev);\n        newModifiedIndices.delete(index);\n        return newModifiedIndices;\n      });\n    } catch (error) {\n      console.error(\"Error updating attendance status:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    style: {\n      margin: 'auto'\n    },\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Time In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Time Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Attendance Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Work Hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Leave Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: daysInMonth.map((day, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n          style: {\n            backgroundColor: day.dayOfWeek === 0 || day.dayOfWeek === 6 ? '#f5f5f5' : 'inherit'\n          },\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              children: [day.date, \" (\", day.day, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"time\",\n              value: dayjs(day.timeIn).format(\"HH:mm:ss\"),\n              onChange: e => handleFieldChange(index, 'timeIn', e.target.value),\n              size: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"time\",\n              value: dayjs(day.timeOut).format(\"HH:mm:ss\"),\n              onChange: e => handleFieldChange(index, 'timeOut', e.target.value),\n              size: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: day.attendanceStatus,\n              onChange: e => handleFieldChange(index, \"attendanceStatus\", e.target.value),\n              size: \"small\",\n              displayEmpty: true,\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"ab\",\n                children: \"ab\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"0.5\",\n                children: \"0.5\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"1\",\n                children: \"1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              value: day.workHours,\n              size: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: day.leaveType,\n              onChange: e => handleFieldChange(index, 'leaveType', e.target.value),\n              displayEmpty: true,\n              size: \"small\",\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"full day leave\",\n                children: \"Full Day Leave\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"half day leave\",\n                children: \"Half Day Leave\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"no pay leave\",\n                children: \"No Pay Leave\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"holiday\",\n                children: \"Holiday\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: modifiedIndices.has(index) && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              size: \"small\",\n              onClick: () => handleSaveUpdate(index),\n              children: \"Save Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 5\n  }, this);\n}\n_s(AttendanceTable, \"cWlZNhy4gLit3EdXfq/QIPL3zJw=\");\n_c = AttendanceTable;\nexport default AttendanceTable;\nvar _c;\n$RefreshReg$(_c, \"AttendanceTable\");","map":{"version":3,"names":["React","useState","useEffect","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","TextField","Select","MenuItem","Typography","Button","dayjs","fetchAttendance","saveUpdatedStatus","jsxDEV","_jsxDEV","AttendanceTable","props","_s","daysInMonth","setDaysInMonth","modifiedIndices","setModifiedIndices","Set","currentMonth","selectedMonth","month","currentYear","selectedYear","days","daysInCurrentMonth","i","date","Date","dayOfWeek","day","push","format","timeIn","timeOut","attendanceStatus","workHours","leaveType","updateAttendanceStatus","loadEmployeeAttendance","employeeAttendanceList","employeeId","attendanceMap","forEach","record","updatedDays","map","attendanceRecord","actualStartTime","actualEndTime","attendance","error","console","handleFieldChange","index","field","value","add","handleSaveUpdate","updatedStatus","prev","newModifiedIndices","delete","component","style","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","type","onChange","e","target","size","displayEmpty","has","variant","color","onClick","_c","$RefreshReg$"],"sources":["C:/Users/weerasi-ps19259/IdeaProjects/payroll-system/frontend/src/components/Attendance/AttendanceTable.js"],"sourcesContent":["/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  Typography,\r\n} from '@mui/material';\r\nimport dayjs from 'dayjs';\r\nimport { fetchAttendance } from '../../services/api';\r\n\r\n\r\nfunction AttendanceTable(props) {\r\n    const [daysInMonth, setDaysInMonth] = useState([]);\r\n  \r\n    // Get all days of the current month\r\n    useEffect(() => {\r\n      const currentMonth = dayjs(`01 ${props.selectedMonth} 2000`, \"DD MMMM YYYY\").month(); \r\n      const currentYear = props.selectedYear; // get the current year\r\n      const days = [];\r\n      const daysInCurrentMonth = dayjs().daysInMonth(); // number of days in the current month\r\n  \r\n      // Create an array of days for the current month\r\n      for (let i = 1; i <= daysInCurrentMonth; i++) {\r\n        const date = dayjs(new Date(currentYear, currentMonth, i));\r\n        const dayOfWeek = date.day(); // day of the week (0 = Sunday, 6 = Saturday)\r\n        days.push({\r\n          date: date.format('YYYY-MM-DD'),\r\n          day: date.format('dddd'),\r\n          dayOfWeek,\r\n          timeIn: '',\r\n          timeOut: '',\r\n          attendanceStatus: 'ab',\r\n          workHours: '',\r\n          leaveType: '',\r\n        });\r\n      }\r\n  \r\n      setDaysInMonth(days); // Set the days in the current month\r\n  \r\n      // Load employee attendance after setting up the days\r\n      const loadEmployeeAttendance = async () => {\r\n        try {\r\n          const employeeAttendanceList = await fetchAttendance(props.employeeId);\r\n          \r\n          // Create a lookup map for quick access by date\r\n          const attendanceMap = {};\r\n          employeeAttendanceList.forEach(record => {\r\n              attendanceMap[record.date] = record;\r\n          });\r\n          // Update daysInMonth using the attendance map\r\n          const updatedDays = days.map(day => {\r\n              const attendanceRecord = attendanceMap[day.date];\r\n              if (attendanceRecord) {\r\n                  return {\r\n                      ...day,\r\n                      timeIn: attendanceRecord.actualStartTime || '',\r\n                      timeOut: attendanceRecord.actualEndTime || '',\r\n                      attendanceStatus: attendanceRecord.attendance || '',\r\n                      workHours: attendanceRecord.workHours || '',\r\n                      leaveType: attendanceRecord.leaveType || '',\r\n                  };\r\n              }\r\n              return day;\r\n          });\r\n\r\n          setDaysInMonth(updatedDays); // Update the state with the fetched data\r\n        } catch (error) {\r\n          console.error(\"Error fetching employee attendance:\", error);\r\n        }\r\n      };\r\n  \r\n      loadEmployeeAttendance();\r\n    }, [props.employeeId,props.selectedMonth,props.selectedYear]);\r\n  \r\n    // Handle change for attendance fields\r\n    const handleFieldChange = (index, field, value) => {\r\n      const updatedDays = [...daysInMonth];\r\n      updatedDays[index][field] = value;\r\n      setDaysInMonth(updatedDays);\r\n    };\r\n\r\n  return (\r\n    <TableContainer component={Paper} style={{margin: 'auto' }}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Date</TableCell>\r\n            <TableCell>Time In</TableCell>\r\n            <TableCell>Time Out</TableCell>\r\n            <TableCell>Attendance Status</TableCell>\r\n            <TableCell>Work Hours</TableCell>\r\n            <TableCell>Leave Type</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {daysInMonth.map((day, index) => (\r\n            <TableRow\r\n              key={index}\r\n              style={{\r\n                backgroundColor:\r\n                  day.dayOfWeek === 0 || day.dayOfWeek === 6 ? '#f5f5f5' : 'inherit', // Different color for weekends\r\n              }}\r\n            >\r\n              <TableCell>\r\n                <Typography>{day.date} ({day.day})</Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <TextField\r\n                  type=\"time\"\r\n                  value={dayjs(day.timeIn).format(\"HH:mm:ss\")}\r\n                  onChange={(e) => handleFieldChange(index, 'timeIn', e.target.value)}\r\n                  size=\"small\"\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <TextField\r\n                  type=\"time\"\r\n                  value={dayjs(day.timeOut).format(\"HH:mm:ss\")}\r\n                  onChange={(e) => handleFieldChange(index, 'timeOut', e.target.value)}\r\n                  size=\"small\"\r\n                />\r\n              </TableCell>\r\n\r\n\r\n\r\n              <TableCell>\r\n                <Select\r\n                    value={day.attendanceStatus}\r\n                    onChange={(e) => handleFieldChange(index, \"attendanceStatus\", e.target.value)}\r\n                    size=\"small\"\r\n                    displayEmpty\r\n                  >\r\n                    <MenuItem value=\"ab\">ab</MenuItem>\r\n                    <MenuItem value=\"0.5\">0.5</MenuItem>\r\n                    <MenuItem value=\"1\">1</MenuItem>\r\n                  </Select>\r\n                </TableCell>\r\n\r\n\r\n              <TableCell>\r\n                <TextField\r\n                  // type=\"number\"\r\n                  value={day.workHours}\r\n                  // onChange={(e) => handleFieldChange(index, 'workHours', e.target.value)}\r\n                  // size=\"small\"\r\n                  // inputProps={{ min: 0, step: 0.5 }}\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <Select\r\n                  value={day.leaveType}\r\n                  onChange={(e) => handleFieldChange(index, 'leaveType', e.target.value)}\r\n                  displayEmpty\r\n                  size=\"small\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  <MenuItem value=\"full day leave\">Full Day Leave</MenuItem>\r\n                  <MenuItem value=\"half day leave\">Half Day Leave</MenuItem>\r\n                  <MenuItem value=\"no pay leave\">No Pay Leave</MenuItem>\r\n                  <MenuItem value=\"holiday\">Holiday</MenuItem>\r\n                </Select>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nexport default AttendanceTable;\r\n\r\n*/\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  Typography,\r\n  Button,\r\n} from '@mui/material';\r\nimport dayjs from 'dayjs';\r\nimport { fetchAttendance, saveUpdatedStatus } from '../../services/api'; // Make sure saveUpdatedStatus is defined in your API service.\r\n\r\nfunction AttendanceTable(props) {\r\n  const [daysInMonth, setDaysInMonth] = useState([]);\r\n  const [modifiedIndices, setModifiedIndices] = useState(new Set());\r\n\r\n  // Get all days of the current month\r\n  useEffect(() => {\r\n    const currentMonth = dayjs(`01 ${props.selectedMonth} 2000`, \"DD MMMM YYYY\").month();\r\n    const currentYear = props.selectedYear;\r\n    const days = [];\r\n    const daysInCurrentMonth = dayjs().daysInMonth();\r\n\r\n    // Create an array of days for the current month\r\n    for (let i = 1; i <= daysInCurrentMonth; i++) {\r\n      const date = dayjs(new Date(currentYear, currentMonth, i));\r\n      const dayOfWeek = date.day();\r\n      days.push({\r\n        date: date.format('YYYY-MM-DD'),\r\n        day: date.format('dddd'),\r\n        dayOfWeek,\r\n        timeIn: '',\r\n        timeOut: '',\r\n        attendanceStatus: 'ab',\r\n        workHours: '',\r\n        leaveType: '',\r\n        updateAttendanceStatus: null,\r\n      });\r\n    }\r\n\r\n    setDaysInMonth(days);\r\n\r\n    // Load employee attendance\r\n    const loadEmployeeAttendance = async () => {\r\n      try {\r\n        const employeeAttendanceList = await fetchAttendance(props.employeeId);\r\n        \r\n        const attendanceMap = {};\r\n        employeeAttendanceList.forEach(record => {\r\n          attendanceMap[record.date] = record;\r\n        });\r\n\r\n        const updatedDays = days.map(day => {\r\n          const attendanceRecord = attendanceMap[day.date];\r\n          if (attendanceRecord) {\r\n            return {\r\n              ...day,\r\n              timeIn: attendanceRecord.actualStartTime || '',\r\n              timeOut: attendanceRecord.actualEndTime || '',\r\n              attendanceStatus: attendanceRecord.attendance || '',\r\n              workHours: attendanceRecord.workHours || '',\r\n              leaveType: attendanceRecord.leaveType || '',\r\n              updateAttendanceStatus: attendanceRecord.updateAttendanceStatus || null,\r\n            };\r\n          }\r\n          return day;\r\n        });\r\n\r\n        setDaysInMonth(updatedDays);\r\n      } catch (error) {\r\n        console.error(\"Error fetching employee attendance:\", error);\r\n      }\r\n    };\r\n\r\n    loadEmployeeAttendance();\r\n  }, [props.employeeId, props.selectedMonth, props.selectedYear]);\r\n\r\n  // Handle change for attendance fields\r\n  const handleFieldChange = (index, field, value) => {\r\n    const updatedDays = [...daysInMonth];\r\n    updatedDays[index][field] = value;\r\n    setDaysInMonth(updatedDays);\r\n\r\n    // Mark the row as modified if attendanceStatus is changed\r\n    if (field === 'attendanceStatus' && value !== daysInMonth[index].attendanceStatus) {\r\n      setModifiedIndices(new Set(modifiedIndices).add(index));\r\n    }\r\n  };\r\n\r\n  // Handle saving the updated attendance status\r\n  const handleSaveUpdate = async (index) => {\r\n    const updatedStatus = daysInMonth[index].attendanceStatus;\r\n    try {\r\n      await saveUpdatedStatus(props.employeeId, daysInMonth[index].date, updatedStatus);\r\n      setModifiedIndices(prev => {\r\n        const newModifiedIndices = new Set(prev);\r\n        newModifiedIndices.delete(index);\r\n        return newModifiedIndices;\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error updating attendance status:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper} style={{ margin: 'auto' }}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Date</TableCell>\r\n            <TableCell>Time In</TableCell>\r\n            <TableCell>Time Out</TableCell>\r\n            <TableCell>Attendance Status</TableCell>\r\n            <TableCell>Work Hours</TableCell>\r\n            <TableCell>Leave Type</TableCell>\r\n            <TableCell>Actions</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {daysInMonth.map((day, index) => (\r\n            <TableRow\r\n              key={index}\r\n              style={{\r\n                backgroundColor: day.dayOfWeek === 0 || day.dayOfWeek === 6 ? '#f5f5f5' : 'inherit',\r\n              }}\r\n            >\r\n              <TableCell>\r\n                <Typography>{day.date} ({day.day})</Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <TextField\r\n                  type=\"time\"\r\n                  value={dayjs(day.timeIn).format(\"HH:mm:ss\")}\r\n                  onChange={(e) => handleFieldChange(index, 'timeIn', e.target.value)}\r\n                  size=\"small\"\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <TextField\r\n                  type=\"time\"\r\n                  value={dayjs(day.timeOut).format(\"HH:mm:ss\")}\r\n                  onChange={(e) => handleFieldChange(index, 'timeOut', e.target.value)}\r\n                  size=\"small\"\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <Select\r\n                  value={day.attendanceStatus}\r\n                  onChange={(e) => handleFieldChange(index, \"attendanceStatus\", e.target.value)}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"ab\">ab</MenuItem>\r\n                  <MenuItem value=\"0.5\">0.5</MenuItem>\r\n                  <MenuItem value=\"1\">1</MenuItem>\r\n                </Select>\r\n              </TableCell>\r\n              <TableCell>\r\n                <TextField\r\n                  value={day.workHours}\r\n                  size=\"small\"\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <Select\r\n                  value={day.leaveType}\r\n                  onChange={(e) => handleFieldChange(index, 'leaveType', e.target.value)}\r\n                  displayEmpty\r\n                  size=\"small\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  <MenuItem value=\"full day leave\">Full Day Leave</MenuItem>\r\n                  <MenuItem value=\"half day leave\">Half Day Leave</MenuItem>\r\n                  <MenuItem value=\"no pay leave\">No Pay Leave</MenuItem>\r\n                  <MenuItem value=\"holiday\">Holiday</MenuItem>\r\n                </Select>\r\n              </TableCell>\r\n              <TableCell>\r\n                {modifiedIndices.has(index) && (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    onClick={() => handleSaveUpdate(index)}\r\n                  >\r\n                    Save Update\r\n                  </Button>\r\n                )}\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nexport default AttendanceTable;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}