{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\weerasi-ps19259\\\\IdeaProjects\\\\payroll-system\\\\frontend\\\\src\\\\components\\\\Employee\\\\UpdateEmployee\\\\UpdateEmployee.js\",\n  _s = $RefreshSig$();\n/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport { addEmployee } from '../../../services/api'; // Adjust the import path as necessary\r\n\r\nfunction UpdateEmployee() {\r\n    const [employeeId, setEmployeeId] = useState(''); // New state for Employee ID input\r\n    const [shortName, setShortName] = useState('');\r\n    const [fullName, setFullName] = useState('');\r\n    const [department, setDepartment] = useState(null);\r\n    const [designation, setDesignation] = useState('');\r\n    const [nicNo, setNicNo] = useState('');\r\n    const [employeeType, setEmployeeType] = useState('');\r\n    const [epfNo, setEpfNo] = useState('');\r\n   \r\n\r\n    const departments = [\r\n        { departmentId: 1, name: 'Kitchen' },\r\n        { departmentId: 2, name: 'Steward' },\r\n        { departmentId: 3, name: 'Back Office' },\r\n        { departmentId: 4, name: 'Front Office' },\r\n        { departmentId: 5, name: 'Cleaning & Maintenance' }\r\n    ];\r\n\r\n    const [error, setError] = useState(null);\r\n    const [success, setSuccess] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Fetch the last employee ID on component mount\r\n        \r\n      \r\n    }, []);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const employeeData = {\r\n            employeeId,\r\n            shortName,\r\n            fullName,\r\n            department,\r\n            designation,\r\n            nicNo,\r\n            employeeType,\r\n            epfNo: employeeType === 'PERMANENT' ? epfNo : '', // Include EPF No if Permanent\r\n            status: \"ACTIVE\"\r\n        };\r\n\r\n        console.log('Employee Data:', employeeData);\r\n\r\n        try {\r\n            const responseData = await addEmployee(employeeData);\r\n            console.log('Employee added:', responseData);\r\n            setSuccess('Employee added successfully!');\r\n            setError(null);\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            setError(error.message);\r\n            setSuccess(null);\r\n        }\r\n\r\n        // Clear the form\r\n        setEmployeeId('');\r\n        setShortName('');\r\n        setFullName('');\r\n        setDepartment(null);\r\n        setDesignation('');\r\n        setNicNo('');\r\n        setEmployeeType('');\r\n        setEpfNo('');\r\n    };\r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <form onSubmit={handleSubmit}>\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Employee ID:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={employeeId}\r\n                            onChange={(e) => setEmployeeId(e.target.value)}\r\n                            required\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Employee Short Name:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={shortName}\r\n                            onChange={(e) => setShortName(e.target.value)}\r\n                            required\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Full Name:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={fullName}\r\n                            onChange={(e) => setFullName(e.target.value)}\r\n                            required\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Department:</span>\r\n                        <select\r\n                            value={department ? department.departmentId : ''}\r\n                            onChange={(e) => {\r\n                                const selectedDept = departments.find(dept => dept.departmentId === Number(e.target.value));\r\n                                setDepartment(selectedDept || null);\r\n                            }}\r\n                            required\r\n                        >\r\n                            <option value=\"\">Select a department</option>\r\n                            {departments.map((dept) => (\r\n                                <option key={dept.departmentId} value={dept.departmentId}>\r\n                                    {dept.name}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Designation:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={designation}\r\n                            onChange={(e) => setDesignation(e.target.value)}\r\n                            required\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>NIC No:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={nicNo}\r\n                            onChange={(e) => setNicNo(e.target.value)}\r\n                            required\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Employee Type:</span>\r\n                        <select\r\n                            value={employeeType}\r\n                            onChange={(e) => {\r\n                                setEmployeeType(e.target.value);\r\n                                if (e.target.value !== 'PERMANENT') {\r\n                                    setEpfNo(''); // Clear EPF No if not Permanent\r\n                                }\r\n                            }}\r\n                            required\r\n                        >\r\n                            <option value=\"\">Select employee type</option>\r\n                            <option value=\"PERMANENT\">Permanent</option>\r\n                            <option value=\"TEMPORARY\">Temporary</option>\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n\r\n                {employeeType === 'PERMANENT' && (\r\n                    <div className='add-new-employee'>\r\n                        <label>\r\n                            <span>EPF No:</span>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={epfNo}\r\n                                onChange={(e) => setEpfNo(e.target.value)}\r\n                                required\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                )}\r\n\r\n                <button type=\"submit\" className=\"add-button\">Update</button>\r\n                {error && <p style={{ color: 'red' }}>{error}</p>}\r\n                {success && <p style={{ color: 'green' }}>{success}</p>}\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpdateEmployee;\r\n*/\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom'; // For getting the employeeId from the URL\nimport { getEmployeeById, updateEmployee } from '../../../services/api'; // Adjust the API methods\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UpdateEmployee() {\n  _s();\n  const {\n    employeeId\n  } = useParams(); // Get the employeeId from the URL\n  const [employee, setEmployee] = useState({\n    employeeId: '',\n    shortName: '',\n    fullName: '',\n    department: null,\n    designation: '',\n    nicNo: '',\n    employeeType: '',\n    epfNo: ''\n  });\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const departments = [{\n    departmentId: 1,\n    name: 'Kitchen'\n  }, {\n    departmentId: 2,\n    name: 'Steward'\n  }, {\n    departmentId: 3,\n    name: 'Back Office'\n  }, {\n    departmentId: 4,\n    name: 'Front Office'\n  }, {\n    departmentId: 5,\n    name: 'Cleaning & Maintenance'\n  }];\n  useEffect(() => {\n    const fetchEmployeeDetails = async () => {\n      try {\n        // Fetch the employee data by ID\n        const response = await getEmployeeById(employeeId);\n        setEmployee(response); // Assuming response has the employee data\n      } catch (error) {\n        console.error('Error fetching employee data:', error);\n        setError('Failed to load employee data');\n      }\n    };\n    fetchEmployeeDetails();\n  }, [employeeId]); // Fetch data only when employeeId changes\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const updatedEmployeeData = {\n      ...employee,\n      epfNo: employee.employeeType === 'PERMANENT' ? employee.epfNo : '',\n      // Include EPF No if Permanent\n      status: \"ACTIVE\"\n    };\n    try {\n      await updateEmployee(updatedEmployeeData); // Call API to update employee\n      setSuccess('Employee updated successfully!');\n      setError(null);\n    } catch (error) {\n      console.error('Error updating employee:', error);\n      setError(error.message);\n      setSuccess(null);\n    }\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEmployee(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-new-employee\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Employee ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"employeeId\",\n            value: employee.employeeId,\n            onChange: handleChange,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-new-employee\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Employee Short Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"shortName\",\n            value: employee.shortName,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-new-employee\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Full Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"fullName\",\n            value: employee.fullName,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-new-employee\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Department:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"department\",\n            value: employee.department ? employee.department.departmentId : '',\n            onChange: e => {\n              const selectedDept = departments.find(dept => dept.departmentId === Number(e.target.value));\n              setEmployee({\n                ...employee,\n                department: selectedDept || null\n              });\n            },\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a department\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 29\n            }, this), departments.map(dept => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dept.departmentId,\n              children: dept.name\n            }, dept.departmentId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-new-employee\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Designation:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"designation\",\n            value: employee.designation,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-new-employee\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"NIC No:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"nicNo\",\n            value: employee.nicNo,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-new-employee\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Employee Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"employeeType\",\n            value: employee.employeeType,\n            onChange: handleChange,\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select employee type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"PERMANENT\",\n              children: \"Permanent\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"TEMPORARY\",\n              children: \"Temporary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 17\n      }, this), employee.employeeType === 'PERMANENT' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-new-employee\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"EPF No:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"epfNo\",\n            value: employee.epfNo,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"add-button\",\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 27\n      }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'green'\n        },\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 9\n  }, this);\n}\n_s(UpdateEmployee, \"u8YJ7xI3hGPj/Z/fKq/EzyFedno=\", false, function () {\n  return [useParams];\n});\n_c = UpdateEmployee;\nexport default UpdateEmployee;\nvar _c;\n$RefreshReg$(_c, \"UpdateEmployee\");","map":{"version":3,"names":["React","useState","useEffect","useParams","getEmployeeById","updateEmployee","jsxDEV","_jsxDEV","UpdateEmployee","_s","employeeId","employee","setEmployee","shortName","fullName","department","designation","nicNo","employeeType","epfNo","error","setError","success","setSuccess","departments","departmentId","name","fetchEmployeeDetails","response","console","handleSubmit","e","preventDefault","updatedEmployeeData","status","message","handleChange","value","target","prevState","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","readOnly","required","selectedDept","find","dept","Number","map","style","color","_c","$RefreshReg$"],"sources":["C:/Users/weerasi-ps19259/IdeaProjects/payroll-system/frontend/src/components/Employee/UpdateEmployee/UpdateEmployee.js"],"sourcesContent":["/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport { addEmployee } from '../../../services/api'; // Adjust the import path as necessary\r\n\r\nfunction UpdateEmployee() {\r\n    const [employeeId, setEmployeeId] = useState(''); // New state for Employee ID input\r\n    const [shortName, setShortName] = useState('');\r\n    const [fullName, setFullName] = useState('');\r\n    const [department, setDepartment] = useState(null);\r\n    const [designation, setDesignation] = useState('');\r\n    const [nicNo, setNicNo] = useState('');\r\n    const [employeeType, setEmployeeType] = useState('');\r\n    const [epfNo, setEpfNo] = useState('');\r\n   \r\n\r\n    const departments = [\r\n        { departmentId: 1, name: 'Kitchen' },\r\n        { departmentId: 2, name: 'Steward' },\r\n        { departmentId: 3, name: 'Back Office' },\r\n        { departmentId: 4, name: 'Front Office' },\r\n        { departmentId: 5, name: 'Cleaning & Maintenance' }\r\n    ];\r\n\r\n    const [error, setError] = useState(null);\r\n    const [success, setSuccess] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Fetch the last employee ID on component mount\r\n        \r\n      \r\n    }, []);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const employeeData = {\r\n            employeeId,\r\n            shortName,\r\n            fullName,\r\n            department,\r\n            designation,\r\n            nicNo,\r\n            employeeType,\r\n            epfNo: employeeType === 'PERMANENT' ? epfNo : '', // Include EPF No if Permanent\r\n            status: \"ACTIVE\"\r\n        };\r\n\r\n        console.log('Employee Data:', employeeData);\r\n\r\n        try {\r\n            const responseData = await addEmployee(employeeData);\r\n            console.log('Employee added:', responseData);\r\n            setSuccess('Employee added successfully!');\r\n            setError(null);\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            setError(error.message);\r\n            setSuccess(null);\r\n        }\r\n\r\n        // Clear the form\r\n        setEmployeeId('');\r\n        setShortName('');\r\n        setFullName('');\r\n        setDepartment(null);\r\n        setDesignation('');\r\n        setNicNo('');\r\n        setEmployeeType('');\r\n        setEpfNo('');\r\n    };\r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <form onSubmit={handleSubmit}>\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Employee ID:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={employeeId}\r\n                            onChange={(e) => setEmployeeId(e.target.value)}\r\n                            required\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Employee Short Name:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={shortName}\r\n                            onChange={(e) => setShortName(e.target.value)}\r\n                            required\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Full Name:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={fullName}\r\n                            onChange={(e) => setFullName(e.target.value)}\r\n                            required\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Department:</span>\r\n                        <select\r\n                            value={department ? department.departmentId : ''}\r\n                            onChange={(e) => {\r\n                                const selectedDept = departments.find(dept => dept.departmentId === Number(e.target.value));\r\n                                setDepartment(selectedDept || null);\r\n                            }}\r\n                            required\r\n                        >\r\n                            <option value=\"\">Select a department</option>\r\n                            {departments.map((dept) => (\r\n                                <option key={dept.departmentId} value={dept.departmentId}>\r\n                                    {dept.name}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Designation:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={designation}\r\n                            onChange={(e) => setDesignation(e.target.value)}\r\n                            required\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>NIC No:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={nicNo}\r\n                            onChange={(e) => setNicNo(e.target.value)}\r\n                            required\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Employee Type:</span>\r\n                        <select\r\n                            value={employeeType}\r\n                            onChange={(e) => {\r\n                                setEmployeeType(e.target.value);\r\n                                if (e.target.value !== 'PERMANENT') {\r\n                                    setEpfNo(''); // Clear EPF No if not Permanent\r\n                                }\r\n                            }}\r\n                            required\r\n                        >\r\n                            <option value=\"\">Select employee type</option>\r\n                            <option value=\"PERMANENT\">Permanent</option>\r\n                            <option value=\"TEMPORARY\">Temporary</option>\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n\r\n                {employeeType === 'PERMANENT' && (\r\n                    <div className='add-new-employee'>\r\n                        <label>\r\n                            <span>EPF No:</span>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={epfNo}\r\n                                onChange={(e) => setEpfNo(e.target.value)}\r\n                                required\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                )}\r\n\r\n                <button type=\"submit\" className=\"add-button\">Update</button>\r\n                {error && <p style={{ color: 'red' }}>{error}</p>}\r\n                {success && <p style={{ color: 'green' }}>{success}</p>}\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpdateEmployee;\r\n*/\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom'; // For getting the employeeId from the URL\r\nimport { getEmployeeById, updateEmployee } from '../../../services/api'; // Adjust the API methods\r\n\r\nfunction UpdateEmployee() {\r\n    const { employeeId } = useParams(); // Get the employeeId from the URL\r\n    const [employee, setEmployee] = useState({\r\n        employeeId: '',\r\n        shortName: '',\r\n        fullName: '',\r\n        department: null,\r\n        designation: '',\r\n        nicNo: '',\r\n        employeeType: '',\r\n        epfNo: ''\r\n    });\r\n\r\n    const [error, setError] = useState(null);\r\n    const [success, setSuccess] = useState(null);\r\n\r\n    const departments = [\r\n        { departmentId: 1, name: 'Kitchen' },\r\n        { departmentId: 2, name: 'Steward' },\r\n        { departmentId: 3, name: 'Back Office' },\r\n        { departmentId: 4, name: 'Front Office' },\r\n        { departmentId: 5, name: 'Cleaning & Maintenance' }\r\n    ];\r\n\r\n    useEffect(() => {\r\n        const fetchEmployeeDetails = async () => {\r\n            try {\r\n                // Fetch the employee data by ID\r\n                const response = await getEmployeeById(employeeId);\r\n                setEmployee(response); // Assuming response has the employee data\r\n            } catch (error) {\r\n                console.error('Error fetching employee data:', error);\r\n                setError('Failed to load employee data');\r\n            }\r\n        };\r\n\r\n        fetchEmployeeDetails();\r\n    }, [employeeId]); // Fetch data only when employeeId changes\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const updatedEmployeeData = {\r\n            ...employee,\r\n            epfNo: employee.employeeType === 'PERMANENT' ? employee.epfNo : '', // Include EPF No if Permanent\r\n            status: \"ACTIVE\"\r\n        };\r\n\r\n        try {\r\n            await updateEmployee(updatedEmployeeData); // Call API to update employee\r\n            setSuccess('Employee updated successfully!');\r\n            setError(null);\r\n        } catch (error) {\r\n            console.error('Error updating employee:', error);\r\n            setError(error.message);\r\n            setSuccess(null);\r\n        }\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setEmployee((prevState) => ({\r\n            ...prevState,\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <form onSubmit={handleSubmit}>\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Employee ID:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"employeeId\"\r\n                            value={employee.employeeId}\r\n                            onChange={handleChange}\r\n                            readOnly\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Employee Short Name:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"shortName\"\r\n                            value={employee.shortName}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Full Name:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"fullName\"\r\n                            value={employee.fullName}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Department:</span>\r\n                        <select\r\n                            name=\"department\"\r\n                            value={employee.department ? employee.department.departmentId : ''}\r\n                            onChange={(e) => {\r\n                                const selectedDept = departments.find(dept => dept.departmentId === Number(e.target.value));\r\n                                setEmployee({ ...employee, department: selectedDept || null });\r\n                            }}\r\n                            required\r\n                        >\r\n                            <option value=\"\">Select a department</option>\r\n                            {departments.map((dept) => (\r\n                                <option key={dept.departmentId} value={dept.departmentId}>\r\n                                    {dept.name}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Designation:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"designation\"\r\n                            value={employee.designation}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>NIC No:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"nicNo\"\r\n                            value={employee.nicNo}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div className='add-new-employee'>\r\n                    <label>\r\n                        <span>Employee Type:</span>\r\n                        <select\r\n                            name=\"employeeType\"\r\n                            value={employee.employeeType}\r\n                            onChange={handleChange}\r\n                            required\r\n                        >\r\n                            <option value=\"\">Select employee type</option>\r\n                            <option value=\"PERMANENT\">Permanent</option>\r\n                            <option value=\"TEMPORARY\">Temporary</option>\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n\r\n                {employee.employeeType === 'PERMANENT' && (\r\n                    <div className='add-new-employee'>\r\n                        <label>\r\n                            <span>EPF No:</span>\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"epfNo\"\r\n                                value={employee.epfNo}\r\n                                onChange={handleChange}\r\n                                required\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                )}\r\n\r\n                <button type=\"submit\" className=\"add-button\">Update</button>\r\n                {error && <p style={{ color: 'red' }}>{error}</p>}\r\n                {success && <p style={{ color: 'green' }}>{success}</p>}\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpdateEmployee;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}