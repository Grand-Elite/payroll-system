{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:3000/api';\nexport const fetchEmployees = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/employee`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching employees:', error);\n    throw error;\n  }\n};\nexport const addEmployee = async employeeData => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/employee`, employeeData);\n    return response.data; // Return the response data for further handling if needed\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error adding employee');\n  }\n};\nexport const uploadAttendanceFile = async (file, onUploadProgress) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  try {\n    const response = await axios.post(\"/api/attendance/upload-excel\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      },\n      onUploadProgress\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error uploading file:\", error);\n    throw error;\n  }\n};\nexport const fetchAttendance = async employeeId => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/employee/${employeeId}/attendance`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching employee attendance:', error);\n    throw error;\n  }\n};\n\n/*\r\nexport const updateAttendanceStatus = async (employeeId, date, status) => {\r\ntry {\r\n  const response = await axios.patch(\"/api/attendance/overwritten-attendance\", {\r\n    employeeId,\r\n    date,\r\n    attendanceStatus: status,\r\n  });\r\n  return response.data; // Return the response data if needed\r\n} catch (error) {\r\n  throw new Error('Failed to update attendance status: ' + error.message);\r\n}\r\n};\r\n*/\n\nconst updateAttendanceStatus = async (attendanceRecordId, updatedStatus) => {\n  try {\n    const response = await axios.patch(\"api/attendance/overwritten-attendance\", {\n      attendanceRecordId,\n      updatedAttendanceStatus: updatedStatus\n    });\n    console.log(\"Update Successful:\", attendanceRecordId = \"2\");\n  } catch (error) {\n    console.error(\"Error updating attendance:\", error);\n  }\n};\nexport { updateAttendanceStatus };","map":{"version":3,"names":["axios","API_BASE_URL","fetchEmployees","response","get","data","error","console","addEmployee","employeeData","post","_error$response","_error$response$data","Error","message","uploadAttendanceFile","file","onUploadProgress","formData","FormData","append","headers","fetchAttendance","employeeId","updateAttendanceStatus","attendanceRecordId","updatedStatus","patch","updatedAttendanceStatus","log"],"sources":["C:/Users/weerasi-ps19259/IdeaProjects/payroll-system/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:3000/api';\r\n\r\nexport const fetchEmployees = async () => {\r\n  try {\r\n    const response =await axios.get(`${API_BASE_URL}/employee`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching employees:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const addEmployee = async (employeeData) => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/employee`, employeeData);\r\n      return response.data; // Return the response data for further handling if needed\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Error adding employee');\r\n    }\r\n  };\r\n\r\n  export const uploadAttendanceFile = async (file, onUploadProgress) => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n  \r\n    try {\r\n      const response = await axios.post(\"/api/attendance/upload-excel\", formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n        onUploadProgress,\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error uploading file:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  export const fetchAttendance = async (employeeId) => {\r\n    try {\r\n      const response =await axios.get(`${API_BASE_URL}/employee/${employeeId}/attendance`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching employee attendance:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /*\r\nexport const updateAttendanceStatus = async (employeeId, date, status) => {\r\n  try {\r\n    const response = await axios.patch(\"/api/attendance/overwritten-attendance\", {\r\n      employeeId,\r\n      date,\r\n      attendanceStatus: status,\r\n    });\r\n    return response.data; // Return the response data if needed\r\n  } catch (error) {\r\n    throw new Error('Failed to update attendance status: ' + error.message);\r\n  }\r\n};\r\n*/\r\n\r\n\r\nconst updateAttendanceStatus = async (attendanceRecordId, updatedStatus) => {\r\n    try {\r\n        const response = await axios.patch(\"api/attendance/overwritten-attendance\", {\r\n            attendanceRecordId,\r\n            updatedAttendanceStatus: updatedStatus\r\n        });\r\n        console.log(\"Update Successful:\", attendanceRecordId = \"2\");\r\n    } catch (error) {\r\n        console.error(\"Error updating attendance:\", error);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport { updateAttendanceStatus };\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAE,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,WAAW,CAAC;IAC3D,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAOC,YAAY,IAAK;EAC/C,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMH,KAAK,CAACU,IAAI,CAAC,GAAGT,YAAY,WAAW,EAAEQ,YAAY,CAAC;IAC3E,OAAON,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAK,eAAA,EAAAC,oBAAA;IACd,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAL,KAAK,CAACH,QAAQ,cAAAQ,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBN,IAAI,cAAAO,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,uBAAuB,CAAC;EAC3E;AACF,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,gBAAgB,KAAK;EACpE,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;EAE7B,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMH,KAAK,CAACU,IAAI,CAAC,8BAA8B,EAAEQ,QAAQ,EAAE;MAC1EG,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDJ;IACF,CAAC,CAAC;IACF,OAAOd,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMgB,eAAe,GAAG,MAAOC,UAAU,IAAK;EACnD,IAAI;IACF,MAAMpB,QAAQ,GAAE,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,aAAasB,UAAU,aAAa,CAAC;IACpF,OAAOpB,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMkB,sBAAsB,GAAG,MAAAA,CAAOC,kBAAkB,EAAEC,aAAa,KAAK;EACxE,IAAI;IACA,MAAMvB,QAAQ,GAAG,MAAMH,KAAK,CAAC2B,KAAK,CAAC,uCAAuC,EAAE;MACxEF,kBAAkB;MAClBG,uBAAuB,EAAEF;IAC7B,CAAC,CAAC;IACFnB,OAAO,CAACsB,GAAG,CAAC,oBAAoB,EAAEJ,kBAAkB,GAAG,GAAG,CAAC;EAC/D,CAAC,CAAC,OAAOnB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EACtD;AACJ,CAAC;AAOD,SAASkB,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}